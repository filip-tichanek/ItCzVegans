---
title: "Vegan-specific signature implies healthier metabolic profile: findings from diet-related multi-omics observational study based on different European populations"
subtitle: "Statistical report for microbiome analysis"
format: 
  html:  
    embed-resources: true
    keep-md: false
    toc: true
    toc-expand: 3
    toc-depth: 4
    toc-location: left
    number-sections: true
    number-depth: 4
    code-fold: show
    code-tools: true
    code-summary: "Open code"
    grid: 
      body-width: 1000px
      sidebar-width: 600px
      margin-width: 100px
editor: source
project:
  type: default
  output-dir: output
theme: darkly
highlight-style: github-dark
fontsize: 12 px
code-block-bg: "#2D2D31"
bibliography: references.bib
fontcolor: "#D1D1D1"
monobackgroundcolor: "#3B3B3B"
---

------------------------------------------------------------------------

```{r setup, echo=FALSE}
knitr::opts_chunk$set(collapse = TRUE)
```

```{css, echo=FALSE}
code.sourceCode {
  font-size: 0.86em;
  border: 1px solid #ffffff; 
  padding: 9px; 
}

code{
    color: #EEE8AA; 
    background: #96464D
}

.equation {
  text-align: center;
  display: block;
  margin: auto;
}

body {
  text-align: justify;
}
```


{{< include README.md >}}


# Initiation

## Set home directory

```{r}

setwd('/home/ticf/GitRepo/ticf/478_MOCA_italian')
```

## Upload initiation file

```{r}
source('478_initiation.R')
```

# Data

## Upload all original data

###  Training set

#### Connect metadata from lipidom table

```{r}
training_metadata <- read.xlsx('gitignore/data/lipidome_training_cohort.xlsx') %>% 
  select(Sample, Country, Diet) %>% 
  mutate(ID = Sample)
```

#### Connect italian data

```{r}
data_microbiome_IT <- read.table(
  'gitignore/data/0_Data_Metaphlan4_species_filtered_IT_rel_ab.txt') %>%  t()
colnames(data_microbiome_IT) <- data_microbiome_IT[1,]

data_microbiome_IT <- data_microbiome_IT[-1,] %>% data.frame() %>% 
  mutate(
    across(
      Adlercreutzia_equolifaciens:Veillonella_atypica, ~ as.numeric(.)/100
      )
  ) %>% 
  left_join(training_metadata, by = 'ID') %>% 
  select(Sample, Country, Diet, everything()) %>% 
  select(-ID)

```

#### Connect czech data

```{r}
data_microbiome_CZ <- read.table(
  'gitignore/data/0_Data_Metaphlan4_species_filtered_Triema_rel_ab.txt') %>%  t()
colnames(data_microbiome_CZ) <- data_microbiome_CZ[1,]

data_microbiome_CZ <- data_microbiome_CZ[-1,] %>% data.frame() 

data_microbiome_CZ <- data_microbiome_CZ %>% 
  mutate(
    across(
      Adlercreutzia_equolifaciens:Veillonella_atypica, ~ as.numeric(.)/100
      )
  ) %>% 
  left_join(training_metadata, by = 'ID') %>% 
  select(Sample, Country, Diet, everything()) %>% 
  select(-ID)

```

#### Merging czech and italian data

```{r}
data_microbiome_original_raw <- bind_rows(data_microbiome_CZ, data_microbiome_IT)

summary(data_microbiome_original_raw)

data_microbiome_original_raw[1:15, 1:5]
```


### Validation set

#### Get metadata from lipidom table

```{r}
data_lipids_validation <- read.xlsx('gitignore/data/lipidome_validation_cohort.xlsx') %>% 
  select(X1, X2) %>% 
  mutate(ID = X1)
```

#### Connect validation data

```{r}
data_microbiome_validation_raw <- read.table(
  'gitignore/data/0_Data_Metaphlan4_species_filtered_KOMPAS_rel_ab.txt') %>% t()

colnames(data_microbiome_validation_raw) <- data_microbiome_validation_raw[1,]

data_microbiome_validation_raw <- data_microbiome_validation_raw[-1, ] %>% data.frame() %>%
  mutate(
    ID = paste0("K", gsub("\\..*", "", trimws(ID))),
    across(Adlercreutzia_equolifaciens:Veillonella_atypica, ~ as.numeric(.)/100)
  ) %>% 
  left_join(data_lipids_validation, by = 'ID') %>% 
  mutate(Data = 'valid', Sample = ID, Diet = X2) %>% 
  select(Sample, Data, Diet, everything()) %>% 
  select(-ID, -X1, -X2)

```

### Get center-log transformed value

```{r}
## Training data
metadata <- data_microbiome_original_raw[, c("Sample", "Country", "Diet")]
bacteria_data <- data_microbiome_original_raw[, -(1:3)]
clr_bacteria_data <- clr(bacteria_data)
data_microbiome_original <- cbind(metadata, clr_bacteria_data)

## Validation data
metadata <- data_microbiome_validation_raw[, c("Sample", "Data", "Diet")]
bacteria_data <- data_microbiome_validation_raw[, -(1:3)]
clr_bacteria_data <- clr(bacteria_data)
data_microbiome_validation <- cbind(metadata, clr_bacteria_data)
```


### Merge training and validation dataset

```{r}
common_microbiome <- intersect(
  colnames(data_microbiome_original), 
  colnames(data_microbiome_validation))[-c(1:2)]

tr1 <- data_microbiome_original %>% 
  mutate(Data = if_else(Country == 'CZ', 'CZ_tr', 'IT_tr')) %>% 
  select(Data, Diet, all_of(common_microbiome))

tr2 <- data_microbiome_validation %>% 
  mutate(Data = 'valid',
         Diet = Diet) %>% 
  select(Data, Diet, all_of(common_microbiome))

data_merged <- bind_rows(tr1, tr2)
```


## Explore

### Data summary

```{r}
summary(data_microbiome_original)
```

#### Distributions - clr transformed 

```{r, fig.height=20, fig.width=12}
#| fig.cap: "Histogram of CLR-transformed proportions for a random selection of 56 bacterial taxa (proportion: number of sequences for each bacterium relative to the total library depth)"

check <- data_microbiome_original %>% 
  dplyr::select(
    Adlercreutzia_equolifaciens:Veillonella_atypica
    ) %>% 
  na.omit()


size = c(8, 7)
par(mfrow = c(size[1],size[2]))
par(mar=c(2,1.5,2,0.5))
set.seed(16)
ran <- sample(1:ncol(check), size[1]*size[2], replace = FALSE)
for(x in ran){
  hist(check[,x], 
       16, 
       col='blue', 
       main = paste0(colnames(check)[x])
  )
}
  
```



#### Comparison training vs validation cohort

```{r, fig.height=20, fig.width=15, warning=FALSE}
#| fig.cap: "Boxplot showing clr-transformed counta across both training cohorts but also in independent validation cohort"

check <- data_merged %>% select(-Data, -Diet)

size = c(8,7)
ran <- sample(1:ncol(check), size[1]*size[2], replace = FALSE)

par(mfrow = c(size[1],size[2]))
par(mar = c(2,1.5,2,0.5))
par(mgp = c(3, 0.5, 0 ))

for(x in ran){
  plot(
    data_merged[, x+2] ~ factor(data_merged$Data),
       main = paste0(colnames(check)[x])
  )
}
```


#### Metabolites accross groups



```{r, fig.height=20, fig.width=14, warning=FALSE}
#| fig.cap: "CLR-trasformed bacteria counts across all 3 cohorts (Czech and Italian training cohorts and an independent Czech valdiation cohort) and across dietary groups"
#| 
colo <- c('#329243', '#F9FFAF')

data_merged <- na.omit(data_merged)

outcomes <- common_microbiome[
    sample(
      1:length(common_microbiome), 35, replace = FALSE
      )
  ]

boxplot_cond <- function(variable) {
  
  
  p <- ggboxplot(data_merged, 
                 x = 'Diet', 
                 y = variable, 
                 fill = 'Diet', 
                 tip.length = 0.15,
                 palette = colo,
                 outlier.shape = 1,
                 lwd = 0.25,
                 outlier.size = 0.8,
                 facet.by = 'Data',
                 title = variable,
                 ylab = 'Lipid level') +
    
    theme(
      plot.title = element_text(size = 10), 
      axis.title = element_text(size = 8),  
      axis.text.y = element_text(size = 7),
      axis.text.x = element_blank(),
      axis.title.x = element_blank()
    ) 
    
  
  return(p)
}

# Plot all outcomes
plots <- map(outcomes, boxplot_cond)

# Create a matrix of plots
plots_arranged <- ggarrange(plotlist = plots, ncol = 5, nrow = 7,  common.legend = TRUE)
plots_arranged
```

# Linear models across taxa

We will fit a feature-specific linear model where the CLR-transformed count of bacteria reads represents the outcome variable whereas `country` (Italy vs Czech), `diet` (vegan vs omnivore), and their interaction (`country:diet`) all represent fixed-effects predictors. So, each model has the following form

$$
CLR({N_i}) = \alpha + \beta_{1} \times country + \beta_{2} \times diet + \beta_{3} \times country:diet + \epsilon
$$
where $N_i$ is read count of $i$-th bacteria taxa

The variables were coded as follows: $diet = -0.5$ for omnivores and $diet = 0.5$ for vegans; $country = -0.5$ for the Czech cohort and $country = 0.5$ for the Italian cohort.   
This parameterization allows us to interpret the linear model `summary` output as presenting the conditional effects of `diet` averaged across both countries and the conditional effects of `country` averaged across both diet groups. We will then use the `emmeans` package [@emmeans-2] to obtain specific estimates for the effect of `diet` in the Italian and Czech cohorts separately, still from a single model.

Taxa that will show a significant diet effect (average effect of `diet` across both countries, adjusted for multiple comparisons with FDR < 0.1) will be then visualized using a forest plot, with country-specific diet effect along with diet effect based on independent validation cohort, to evaluate how generalizable these findings are (see external validation section).


Note that p-value for avg effects are the same as produced with `car::Anova(model, type = 'III')`.


## Select data 

```{r}
data_analysis <- data_microbiome_original %>%
  na.omit() %>%
  dplyr::mutate(
    Diet_VEGAN = as.numeric(
      dplyr::if_else(
        Diet == "VEGAN", 0.5, -0.5
      )
    ),
    Country_IT = as.numeric(
      dplyr::if_else(
        Country == "IT", 0.5, -0.5
      )
    )
  ) %>%
  dplyr::select(
    Sample,
    Country,
    Country_IT,
    Diet,
    Diet_VEGAN,
    dplyr::everything()
  )

summary(data_analysis[ , 1:12])
```

### Define number of microbiome and covariates

```{r}
n_covarites <- 5
n_features <- ncol(data_analysis) - n_covarites
```

### Create empty objects

```{r}
outcome <- vector('double', n_features)
logFD_VGdiet_inCZ <- vector('double', n_features)
logFD_VGdiet_inIT <- vector('double', n_features)
logFD_VGdiet_avg <- vector('double', n_features)

logFD_ITcountry_avg <- vector('double', n_features)
diet_country_int <- vector('double', n_features)


P_VGdiet_inCZ <- vector('double', n_features)
P_VGdiet_inIT <- vector('double', n_features)
P_VGdiet_avg <- vector('double', n_features)

P_ITcountry_avg <- vector('double', n_features)
P_diet_country_int <- vector('double', n_features)


CI_L_VGdiet_inCZ <- vector('double', n_features)
CI_L_VGdiet_inIT <- vector('double', n_features)
CI_L_VGdiet_avg <- vector('double', n_features)

CI_U_VGdiet_inCZ <- vector('double', n_features)
CI_U_VGdiet_inIT <- vector('double', n_features)
CI_U_VGdiet_avg <- vector('double', n_features)
```

### Estimate over outcomes

```{r}
for (i in 1:n_features) {
  
  ## define variable
  data_analysis$outcome <- data_analysis[, (i + n_covarites)]

  ## fit model
  model <- lm(outcome ~ Country_IT * Diet_VEGAN, data = data_analysis)

  ## get contrast (effects of diet BY COUNTRY)
  contrast_emm <- summary(
    pairs(
      emmeans(
        model,
        specs = ~ Diet_VEGAN | Country_IT
        ),
      interaction = TRUE,
      adjust = "none"
      ),
    infer = c(TRUE, TRUE)
    )

  ## save results
  outcome[i] <- names(data_analysis)[i + n_covarites]
  
  ## country effect
  logFD_ITcountry_avg[i] <- summary(model)$coefficients[
    which(
      names(model$coefficients) == "Country_IT"
    ), 1
  ]

  P_ITcountry_avg[i] <- summary(model)$coefficients[
    which(
      names(model$coefficients) == "Country_IT"
    ), 4
  ]
  
  
  ## diet effect
  tr <- confint(model)
  
  CI_L_VGdiet_avg[i] <- tr[which(row.names(tr) == 'Diet_VEGAN'),][1]
  CI_U_VGdiet_avg[i] <- tr[which(row.names(tr) == 'Diet_VEGAN'),][2]
  
  logFD_VGdiet_avg[i] <- summary(model)$coefficients[
    which(
      names(model$coefficients) == "Diet_VEGAN"
    ), 1
  ]

  P_VGdiet_avg[i] <- summary(model)$coefficients[
    which(
      names(model$coefficients) == "Diet_VEGAN"
    ), 4
  ]
  
  logFD_VGdiet_inCZ[i] <- -contrast_emm[1,3]
  P_VGdiet_inCZ[i] <- contrast_emm$p.value[1]
  CI_L_VGdiet_inCZ[i] <- -contrast_emm$upper.CL[1]
  CI_U_VGdiet_inCZ[i] <- -contrast_emm$lower.CL[1]
  
  logFD_VGdiet_inIT[i] <- -contrast_emm[2,3]
  P_VGdiet_inIT[i] <- contrast_emm$p.value[2]
  CI_L_VGdiet_inIT[i] <- -contrast_emm$upper.CL[2]
  CI_U_VGdiet_inIT[i] <- -contrast_emm$lower.CL[2]
  
  ## interaction
  diet_country_int[i] <- summary(model)$coefficients[
    which(
      names(model$coefficients) == "Country_IT:Diet_VEGAN"
    ), 1
  ]

  P_diet_country_int[i] <- summary(model)$coefficients[
    which(
      names(model$coefficients) == "Country_IT:Diet_VEGAN"
    ), 4
  ]
}

```


### Results table

```{r}
result_microbiome <- data.frame(
  outcome,
  logFD_ITcountry_avg, P_ITcountry_avg,
  logFD_VGdiet_avg, P_VGdiet_avg,
  logFD_VGdiet_inCZ, P_VGdiet_inCZ,
  logFD_VGdiet_inIT, P_VGdiet_inIT,
  diet_country_int, P_diet_country_int,
  CI_L_VGdiet_avg, CI_U_VGdiet_avg,
  CI_L_VGdiet_inCZ, CI_U_VGdiet_inCZ,
  CI_L_VGdiet_inIT, CI_U_VGdiet_inIT
)
```

### Adjust p values

```{r}
result_microbiome <- result_microbiome %>% 
  dplyr::mutate(
    fdr_ITcountry_avg = p.adjust(P_ITcountry_avg, method = 'BH'),
    fdr_VGdiet_avg = p.adjust(P_VGdiet_avg, method = 'BH'),
    
    fdr_VGdiet_inCZ = p.adjust(P_VGdiet_inCZ, method = 'BH'),
    fdr_VGdiet_inIT = p.adjust(P_VGdiet_inIT, method = 'BH'),
    fdr_diet_country_int = p.adjust(P_diet_country_int, method = 'BH')
  ) %>% 
  dplyr::select(
    outcome,
    logFD_ITcountry_avg, P_ITcountry_avg, fdr_ITcountry_avg,
    logFD_VGdiet_avg, P_VGdiet_avg, fdr_VGdiet_avg,
    logFD_VGdiet_inCZ, P_VGdiet_inCZ, fdr_VGdiet_inCZ,
    logFD_VGdiet_inIT, P_VGdiet_inIT, fdr_VGdiet_inIT,
    diet_country_int, P_diet_country_int, fdr_diet_country_int,
    CI_L_VGdiet_avg, CI_U_VGdiet_avg,
    CI_L_VGdiet_inCZ, CI_U_VGdiet_inCZ,
    CI_L_VGdiet_inIT, CI_U_VGdiet_inIT
  )
```


### Show and save results

```{r}
kableExtra::kable(result_microbiome,
  caption = "Result of linear models, modelling the CLR-transformed reads count of given bacterial taxa, with `Diet`, `Country` and `Diet:Country` interaction as predictors. `logFD` prefix: implies estimated effects (regression coefficient), i.e. how much CLR-transformed reads count differ in vegans compared to omnivores, `P`: p-value, `fdr`: p-value after adjustment for multiple comparison, `CI_L` and `CI_U`: lower and upper bounds of 95% confidence interval respectively. `avg` suffix shows effect averaged across subgroups, whereas `inCZ` and `inIT` shows effect in Czech or Italian cohort respectively. All estimates in a single row are based on a single model"
)

if(file.exists('gitignore/result_microbiome.csv') == FALSE){
  write.table(result_microbiome, 'gitignore/result_microbiome.csv', row.names = FALSE)
  }
```



# Elastic net

To assess the predictive power of microbiome features to discriminate between diet strategy, we employed Elastic Net logistic regression. 

As we expected very high level of co-linearity, we allowed $alpha$ to rather small (0, 0.2 or 0.4). All features were standardized by 2 standard deviations.

The performance of the predictive models was evaluated through their capacity of discriminate between vegan and omnivore diets, using out-of-sample area under ROC curve (AUC; estimated with out-of-bag bootstrap) as the measure of discriminatory capacity.

All features were transformed by 2 standard deviations (resulting in standard deviation of 0.5).

## Prepare data for `glmnet`

```{r}
data_microbiome_glmnet <- data_microbiome_original %>%
  na.omit() %>%
  dplyr::mutate(
    vegan = as.numeric(
      dplyr::if_else(
        Diet == "VEGAN", 1, 0
      )
    ),
    dplyr::across(
      `Adlercreutzia_equolifaciens`:`Veillonella_atypica`, ~ arm::rescale(.)
    )
  ) %>%
  dplyr::select(
    vegan,
    dplyr::everything()
  ) %>%
  dplyr::select(
    Sample, vegan, `Adlercreutzia_equolifaciens`:`Veillonella_atypica`
  )
```


## Fit model

```{r}
modelac <- "elanet_microbiome_all"

assign(
  modelac,
  run(
    expr = clust_glmnet(
      data = data_microbiome_glmnet,
      outcome = "vegan",
      clust_id = "Sample",
      sample_method = "oos_boot",
      N = 500,
      alphas = c(0, 0.2, 0.4),
      family = "binomial",
      seed = 478
    ),
    path = paste0("gitignore/run/", modelac)
  )
)
```

## Model summary

```{r}
elanet_microbiome_all$model_summary
```

## Calibration plot

```{r}
#| fig.cap: "Calibration plot, showing outcomes value (y-axis) according to prediction of elastic net model (x-axis). Grey curves show predictions from different bootstrap iterations. Red lines and shadows show average prediction across all iterations and its 95% confidence"
#| 
elanet_microbiome_all$plot
```

## Estimated coefficients

```{r}
data.frame(
  microbiome = row.names(
    elanet_microbiome_all$betas
    )[
      which(
        abs(
          elanet_microbiome_all$betas
          )>0
        )
      ],
  beta = elanet_microbiome_all$betas[
    abs(
      elanet_microbiome_all$betas
      )>0
    ]
  ) %>% 
  mutate(
    is_in_ExtValCoh = if_else(
      microbiome %in% names(data_microbiome_validation),
      1, 0
      )
    )

elanet_microbiome_all$betas
```

## Plot beta coefficients

```{r, fig.height=10, fig.width=6}
#| fig.cap: "Regression coefficients from the elastic net model predicting vegan diet strategy based on CLR-transformed and standardized read counts across bacterial taxa. Taxa are ordered by the magnitude of the standardized coefficients, indicating their relative importance in distinguishing between the diet groups. The sign of each coefficient indicates the direction of association with vegan diet status, with positive values indicating a higher likelihood of vegan status and negative values indicating omnivore status. Taxa whose effects were shrunk to zero are not shown."

data.frame(
  microbiome = row.names(elanet_microbiome_all$betas),
  beta = elanet_microbiome_all$betas[, 1]
) %>%
  arrange(abs(beta)) %>%
  filter(abs(beta) > 0,
         !grepl('Intercept', microbiome)) %>%
  mutate(microbiome = factor(microbiome, levels = microbiome)) %>% # Preserve order
  ggplot(
    aes(
      x = microbiome,
      y = beta
    )
  ) +
  geom_point() +
  geom_hline(yintercept = 0, color = "black") +
  labs(
    y = "Standardized beta coefficients",
    x = "Bacteria species"
  ) +
  theme_minimal() +
  coord_flip() + # Flip coordinates to have outcomes on the y-axis
  theme(
    axis.text.x = element_text(size = 10),
    axis.text.y = element_text(size = 10),
    axis.title.x = element_text(size = 12),
    axis.title.y = element_text(size = 12),
    legend.position = "bottom"
  )
```

# External validation

External validation was performed with an independent Czech cohort. 

As a first step, we will use the previously developed and validated elastic net model to predict vegan status in the independent Czech cohort. The validation data will be standardized using the mean and standard deviation of each taxa as taken from the training cohort to ensure comparability across datasets. For each subject in the external validation cohort, we will estimate the predicted probability of being vegan using the elastic net model. This predicted probability will then be used as a variable to discriminate between the diet groups in the independent cohort.

In a 2nd step, we will look at taxa that significantly differed between diet groups (average vegan diet effect across both countries, FDR<0.01) estimated by linear models (one per a taxa) with data of training cohort. Then we will fit linear models also for external validation cohort. Effect of vegan diet on these taxa will be shown along with 95% confidence interval for all cohorts: training Czech and Italian cohorts, but also in Czech independent (validating) cohort

## Prediction of diet (elastic net)

### Get table of weights, means and SDs

```{r, warning=FALSE}

coefs_microbiome_all <- get_coef(
  original_data = data_analysis,
  glmnet_model = elanet_microbiome_all)

coefs_microbiome_all

```

### Identify shared and missing predictors

```{r}

## Which are missing in the validation set
missing <- setdiff(
  coefs_microbiome_all$predictor[-1], 
  colnames(
    data_microbiome_validation
    )
  )

missing

## Which are common with the validations et
common_predictors <- intersect(coefs_microbiome_all$predictor, colnames(data_microbiome_validation))

```

### Standardize data in validation set 

```{r}
data_microbiome_validation_pred_all <- data_microbiome_validation %>%
  dplyr::mutate(
    vegan = if_else(
      Diet == "VEGAN", 1, 0
    )
  ) %>%
  dplyr::select(
    vegan,
    dplyr::all_of(common_predictors)
  ) %>% 
  dplyr::mutate(
    across(
      .cols = -vegan,
      .fns = ~ . 
      - coefs_microbiome_all$mean[
        match(
          cur_column(), 
          coefs_microbiome_all$predictor
          )
        ]
      )
    ) %>% 
  dplyr::mutate(
    across(
      .cols = -vegan,
      .fns = ~ . 
      / coefs_microbiome_all$SD[
        match(
          cur_column(), 
          coefs_microbiome_all$predictor
          )
        ]
      )
    ) 
```


### Result


```{r}
#| fig.cap: "Receiver Operating Characteristic (ROC) curve illustrating the model's ability to distinguish between vegan and omnivore status based on CLR-transformed bacterial taxa abundances in the external validation Czech cohort. The curve plots the true positive rate (sensitivity) against the true positive rate (specificity) at various thresholds of predicted vegan status, as estimated from the elastic net model developed on the training data. The area under the curve (AUC) represents the model's overall performance, with values closer to 1 indicating stronger discrimination."

elanet_microbiome_all$fit

newx <- as.matrix(data_microbiome_validation_pred_all[,-1])

predicted <- predict(
  elanet_microbiome_all$fit, 
  newx = newx)

tr <- data_microbiome_validation_pred_all %>% 
  dplyr::mutate(
    predicted_logit = as.numeric(
      predict(
        elanet_microbiome_all$fit,
        newx = newx
        )
      )
    ) %>% 
  dplyr::mutate(
    predicted = inv_logit(predicted_logit)
  )

roc_microbiome_all <- pROC::roc(
      vegan ~ predicted_logit,
      data = tr,
      direction = "<",
      levels = c(0, 1),
      ci = TRUE
      )

roc_microbiome_all
plot(roc_microbiome_all)
```


## Diet effect across datasets

Similarly as in training data cohorts, we will fit linear model per each of the selected taxa ($CLR$ - transformed), with a single fixed effect factor of `diet`. 


### Linear models in validation cohort

```{r}
data_analysis_microbiome <- data_microbiome_validation %>%
  dplyr::mutate(
    Diet_VEGAN = as.numeric(
      dplyr::if_else(
        Diet == 'VEGAN', 1, 0
      )
    )
  ) %>%
  dplyr::select(
    Diet_VEGAN,
    all_of(common_microbiome)
  )
```

#### Define number of microbiome and covariates

```{r}
n_covarites <- 1
n_features <- ncol(data_analysis_microbiome) - n_covarites
```

#### Create empty objects

```{r}
outcome <- vector('double', n_features)
logFD_VGdiet <- vector('double', n_features)
P_VGdiet <- vector('double', n_features)
CI_L_VGdiet <- vector('double', n_features)
CI_U_VGdiet <- vector('double', n_features)
```

#### Estimate over outcomes

```{r}
for (i in 1:n_features) {
  ## define variable
  data_analysis_microbiome$outcome <- data_analysis_microbiome[, (i + n_covarites)]

  ## fit model
  model <- lm(outcome ~ Diet_VEGAN, data = data_analysis_microbiome)

  ## save results
  outcome[i] <- names(data_analysis_microbiome)[i + n_covarites]

  ## diet effect
  tr <- confint(model)

  CI_L_VGdiet[i] <- tr[which(row.names(tr) == "Diet_VEGAN"), ][1]
  CI_U_VGdiet[i] <- tr[which(row.names(tr) == "Diet_VEGAN"), ][2]

  logFD_VGdiet[i] <- summary(model)$coefficients[
    which(
      names(model$coefficients) == "Diet_VEGAN"
    ), 1
  ]

  P_VGdiet[i] <- summary(model)$coefficients[
    which(
      names(model$coefficients) == "Diet_VEGAN"
    ), 4
  ]
}
```

#### Results table

```{r}

result_microbiome_val <- data.frame(
  outcome,
  logFD_VGdiet, P_VGdiet,
  CI_L_VGdiet, CI_U_VGdiet
)

kableExtra::kable(result_microbiome_val,
  caption = "Results of linear models estimating the effect of diet on CLR-trasformed taxa count. Only lipids that significantly differed between diet groups in training cohorts (FDR < 0.1, average effect across both training cohorts) were included. `logFD` represents the estimated effects (regression coefficient), indicating how much the CLR-transformed taxa count differ between vegans and omnivores. `P`: p-value, `fdr`: p-value adjusted for multiple comparisons, and `CI_L` and `CI_U` represent the lower and upper bounds of the 95% confidence interval, respectively. All estimates in a single row are based on a single model."
)

if (file.exists("gitignore/result_microbiom_validation.csv") == FALSE) {
  write.table(result_microbiome_val,
    "gitignore/result_microbiom_validation.csv",
    row.names = FALSE
  )
}
```

### Forest plot

#### Prepare data

```{r}
## relevant microbiome
diet_sensitive_microbiome <- result_microbiome %>%
  filter(
    fdr_VGdiet_avg < 0.1,
    outcome %in% common_microbiome
  ) %>%
  select(
    outcome
  )

len <- nrow(diet_sensitive_microbiome)

## subset result tables
result_microbiome_subset <- result_microbiome %>%
  filter(outcome %in% diet_sensitive_microbiome$outcome,
         outcome %in% common_microbiome)

result_microbiome_val_subset <- result_microbiome_val %>%
  filter(outcome %in% diet_sensitive_microbiome$outcome,
         outcome %in% common_microbiome)

## create a data frame
data_forest <- data.frame(
  outcome = rep(diet_sensitive_microbiome$outcome, 3),
  beta = c(
    result_microbiome_subset$logFD_VGdiet_inCZ,
    result_microbiome_subset$logFD_VGdiet_inIT,
    result_microbiome_val_subset$logFD_VGdiet
  ),
  lower = c(
    result_microbiome_subset$CI_L_VGdiet_inCZ,
    result_microbiome_subset$CI_L_VGdiet_inIT,
    result_microbiome_val_subset$CI_L_VGdiet
  ),
  upper = c(
    result_microbiome_subset$CI_U_VGdiet_inCZ,
    result_microbiome_subset$CI_U_VGdiet_inIT,
    result_microbiome_val_subset$CI_U_VGdiet
  ),
  dataset = c(
    rep("CZ", len),
    rep("IT", len),
    rep("Validation", len)
  )
)
```

#### Create forest plot

```{r, fig.height=8, fig.width=7}
#| fig.cap: "The forest plot illustrates the effects of a vegan diet on the CLR-transformed read counts of selected bacteria, along with their 95% confidence intervals, across two training cohorts (Czech and Italian) and one independent Czech cohort (external validation). Green points/lines represent differences in CLR-transformed bacterial read counts between vegans and omnivores within the Italian cohort; blue points/lines represent the same difference within the Czech cohort; grey points/lines represent the same difference within the Czech external validation cohort. Positive values suggest a higher count in vegans compared to omnivores. Only bacteria that showed significant differences between vegan and omnivorous diets (as an average effect across both training cohorts) were selected, and these effects were further validated in the independent cohort. The estimates for the training cohorts were obtained from a single linear model that included `Diet`, `Country`, and the interaction term `Diet:Country` as predictors. In the independent Czech validation cohort, `Diet` was the only fixed-effect predictor"
 
colors <- c("CZ" = "#150999", "IT" = "#329243", "Validation" = "grey60")

# Create the forest plot
ggplot(data_forest, aes(x = outcome, y = beta, ymin = lower, ymax = upper, color = dataset)) +
  geom_pointrange(position = position_dodge(width = 0.5), size = 0.5) +
  geom_hline(yintercept = 0, color = 'black') +
  geom_errorbar(position = position_dodge(width = 0.5), width = 0.2) +
  scale_color_manual(values = colors) +
  labs(
    y = "Effect of vegan diet on log2-trasformed microbiome level", 
    x = "Outcome", 
    color = "Dataset"
  ) +
  theme_minimal() +
  coord_flip() +  # Flip coordinates to have outcomes on the y-axis
  theme(
    axis.text.x = element_text(size = 10),
    axis.text.y = element_text(size = 10),
    axis.title.x = element_text(size = 12),
    axis.title.y = element_text(size = 12),
    legend.position = "bottom"
  )  
```

# Reproducibility

```{r}
sessionInfo()
```
