---
title: "Vegan-specific signature implies healthier metabolic profile: findings from diet-related multi-omics observational study based on different European populations"
subtitle: "Statistical report for lipidom analysis"
format: 
  html:  
    embed-resources: true
    keep-md: false
    toc: true
    toc-expand: 3
    toc-depth: 4
    toc-location: left
    number-sections: true
    number-depth: 4
    code-fold: true
    code-tools: true
    code-summary: "Open code"
    grid: 
      body-width: 1000px
      sidebar-width: 600px
      margin-width: 100px
editor: source
project:
  type: default
  output-dir: output
theme: darkly
highlight-style: github-dark
fontsize: 12 px
code-block-bg: "#2D2D31"
bibliography: references.bib
fontcolor: "#D1D1D1"
monobackgroundcolor: "#3B3B3B"
---

------------------------------------------------------------------------

```{r setup, echo=FALSE}
knitr::opts_chunk$set(collapse = TRUE)
```

```{css, echo=FALSE}
code.sourceCode {
  font-size: 0.86em;
  border: 1px solid #ffffff; 
  padding: 9px; 
}

code{
    color: #EEE8AA; 
    background: #96464D
}

.equation {
  text-align: center;
  display: block;
  margin: auto;
}

body {
  text-align: justify;
}
```


{{< include README.md >}}


# Initiation

## Set home directory

```{r}

setwd('/home/ticf/1_ticf_sec/478_MOCA_italian/')
```

## Upload initiation file

```{r}
source('478_initiation.R')
```

# Data

## Upload all original data

###  Training set

```{r}
data_lipids_original <- read_excel('gitignore/data/lipidome_training_cohort_new names.xlsx')

data_lipids_original[1:20, 1:8]
names(data_lipids_original)

```

### Validation set

```{r}
data_lipids_validation <- read.csv('gitignore/data/KOMPAS_data_lipid.csv')

data_lipids_validation <- data_lipids_validation %>%
  select(-Class) %>%                           # Remove 'Class' column
  column_to_rownames(var = "Molecule") %>%     # Use 'Molecule' as rownames
  t() %>%                                      # Transpose the data
  as.data.frame() %>% 
  mutate(X2 = if_else(grepl('VG', rownames(.)), 'VEGAN', 'OMNI')) %>% 
  select(X2, everything()) %>% 
  mutate(across(`ACar 16:0` : `TG 54:6`, ~ as.numeric(.)))

data_lipids_validation %>% summary()
data_lipids_validation[1:5, ]
names(data_lipids_validation)
```

### Merge training and validation dataset

```{r}
common_lipids <- intersect(
  colnames(data_lipids_original), 
  colnames(data_lipids_validation))

tr1 <- data_lipids_original %>% 
  mutate(Data = if_else(Country == 'CZ', 'CZ_tr', 'IT_tr')) %>% 
  select(Data, Diet, all_of(common_lipids)) # %>% data.frame()

tr2 <- data_lipids_validation %>% 
  mutate(Data = 'valid',
         Diet = X2) %>% 
  select(Data, Diet, all_of(common_lipids)) # %>% data.frame()

## final merge of data
data_merged <- bind_rows(tr1, tr2)
```


## Explore

#### Distributions - raw data

```{r, fig.height=20, fig.width=12}
#| fig.cap: "Histogram of data distributions for random 48 lipids"
check <- data_lipids_original %>% 
  dplyr::select(
    `ACar 10:0`: `TG 18:1_18:1_20:4`
    ) %>% 
  na.omit() %>% data.frame(check.names = FALSE)


size <-  c(6, 8)
par(mfrow = c(size[1], size[2]))
par(mar=c(2, 1.5, 2, 0.5))

set.seed(478)
ran <- sample(1:ncol(check), size[1]*size[2], replace = FALSE)

for(x in ran){
  hist(check[,x], 
       16, 
       col= 'blue', 
       main = paste0(colnames(check)[x])
  )
}
  
```

Data seems to be highly right-tailed. 


#### Distribution - Log2 transformed

```{r, fig.height=20, fig.width=12}
#| fig.cap: "Histogram of data distributions for random 48 lipids, but after log2-transformation"
#| 
par(mfrow = c(size[1],size[2]))
par(mar=c(2,1.5,2,0.5))
set.seed(478)

for(x in ran){
  hist(log2(check[,x]+1), 
       16, 
       col='blue', 
       main = paste0('log2',colnames(check)[x])
  )
}

```

Seems more symmetrical and Gaussian-like

#### Comparison training vs validation cohort

```{r, fig.height=10, fig.width=8.5, warning=FALSE}
#| fig.cap: "Boxplot showing log2-transformed lipid levels across both training cohorts and also independent validation cohort"
data_merged <- data_merged %>% data.frame(check.names = FALSE) %>% na.omit()
check <- data_merged %>% select(-Data, -Diet) %>% data.frame(check.names = FALSE)


size = c(5,6)
par(mfrow = c(size[1],size[2]))
par(mar = c(2, 1.5, 2, 0.5))
par(mgp = c(3, 0.5, 0 ))

ran <- sample(ncol(check), size[1] * size[2])

for(x in ran){
  plot(log2(data_merged[, (x+2)] + 1) ~ factor(data_merged$Data),
       main = paste0(colnames(check)[x])
  )
}
```


#### Lipids accross groups


```{r, fig.height=12, fig.width=10, warning=FALSE}
#| fig.cap: "Levels of lipids across all 3 cohorts (Czech and Italian training cohorts and an independent Czech valdiation cohort) and across dietary groups"

colo <- c('#329243', '#F9FFAF')

outcomes <- sample(common_lipids, 30)

boxplot_cond <- function(variable) {
  
  
  p <- ggboxplot(data_merged, 
                 x = 'Diet', 
                 y = variable, 
                 fill = 'Diet', 
                 tip.length = 0.15,
                 palette = colo,
                 outlier.shape = 1,
                 lwd = 0.25,
                 outlier.size = 0.8,
                 facet.by = 'Data',
                 title = variable,
                 ylab = 'Lipid level') +
    
    theme(
      plot.title = element_text(size = 10), 
      axis.title = element_text(size = 8),  
      axis.text.y = element_text(size = 7),
      axis.text.x = element_blank(),
      axis.title.x = element_blank()
    ) 
    
  
  return(p)
}

# Plot all outcomes
plots <- map(outcomes, boxplot_cond)

# Create a matrix of plots
plots_arranged <- ggarrange(plotlist = plots, ncol = 5, nrow = 6,  common.legend = TRUE)
plots_arranged
```

Again, but with log2-transformation to better see group differences within validation cohort

```{r, fig.height=12, fig.width=10, warning=FALSE}
#| fig.cap: "Log2-trasformed levels of lipids across all 3 cohorts (Czech and Italian training cohorts and an independent Czech valdiation cohort) and across dietary groups"
colo <- c('#329243', '#F9FFAF')

outcomes <- sample(common_lipids, 30)

data_merged_log2 <- data_merged %>%
  mutate(across(all_of(common_lipids), ~ log2(. + 1)))

boxplot_cond <- function(variable) {
  
  
  p <- ggboxplot(data_merged_log2, 
                 x = 'Diet', 
                 y = variable, 
                 fill = 'Diet', 
                 tip.length = 0.15,
                 palette = colo,
                 outlier.shape = 1,
                 lwd = 0.25,
                 outlier.size = 0.8,
                 facet.by = 'Data',
                 title = variable,
                 ylab = 'log2(Lipid level)') +
    
    theme(
      plot.title = element_text(size = 10), 
      axis.title = element_text(size = 8),  
      axis.text.y = element_text(size = 7),
      axis.text.x = element_blank(),
      axis.title.x = element_blank()
    ) 

  return(p)
}

# Plot all outcomes
plots <- map(outcomes, boxplot_cond)

# Create a matrix of plots
plots_arranged <- ggarrange(plotlist = plots, ncol = 5, nrow = 6,  common.legend = TRUE)
plots_arranged
```


# Linear models across lipids

we will fit a feature-specific linear model where the log2-transformed lipid represents the outcome variable whereas `country` (Italy vs Czech), `diet` (vegan vs omnivore), and their interaction (`country:diet`) all represent fixed-effects predictors. So, each model has the following form

$$
log_{2}(\text{lipid level}) = \alpha + \beta_{1} \times \text{country} + \beta_{2} \times \text{diet} + \beta_{3} \times \text{country:diet} + \epsilon
$$

The variables were coded as follows: $diet = -0.5$ for omnivores and $diet = 0.5$ for vegans; $country = -0.5$ for the Czech cohort and $country = 0.5$ for the Italian cohort.   
This parameterization allows us to interpret the linear model `summary` output as presenting the conditional effects of `diet` averaged across both countries and the conditional effects of `country` averaged across both diet groups. We will then use the `emmeans` package [@emmeans-2] to obtain specific estimates for the effect of `diet` in the Italian and Czech cohorts separately, still from a single model.

Lipids that will show a significant diet effect (average effect of `diet` across both countries, adjusted for multiple comparisons with FDR < 0.05) will be then visualized using a forest plot, with country-specific diet effect along with diet effect based on independent validation cohort, to evaluate how generalizable these findings are. 

Given the distribution of the estimated lipids concentrations, we will use log2-transformed values

Note that p-value for avg effects are the same as produced with `car::Anova(model, type = 'III')`.

We will run the models in two versions: the first will include all lipids, and the second will include only lipids available in the validation cohort (i.e., only those for which the association with diet can be validated in the external cohort).

## Preparation

### Define transformation function for each dataset

```{r}
trans_lipid <- function(x){
  log2(x + 1)
}
```

### Select data - all lipids

```{r}
data_analysis <- data_lipids_original %>%
  na.omit() %>%
  dplyr::mutate(
    Diet_VEGAN = as.numeric(
      dplyr::if_else(
        Diet == "VEGAN", 0.5, -0.5
      )
    ),
    Country_IT = as.numeric(
      dplyr::if_else(
        Country == "IT", 0.5, -0.5
      )
    ),
    dplyr::across(
      `ACar 10:0`:`TG 18:1_18:1_20:4`, ~ trans_lipid(.)
    )
  ) %>%
  dplyr::select(
    Sample,
    Country,
    Country_IT,
    Diet,
    Diet_VEGAN,
    Group,
    dplyr::everything()
  ) %>% data.frame(check.names = FALSE)

summary(data_analysis[ , 1:12])
```

### Select data - training-validation intersection

```{r}
data_analysis_narrowed <- data_analysis %>% 
  dplyr::select(
    Sample, Country, Country_IT, Diet, Diet_VEGAN, Group, 
    dplyr::all_of(
      intersect(
        colnames(
          data_lipids_validation
          ), colnames(
            data_lipids_original
            )
        )
      )
    )
```


### Define number of lipids and covariates

```{r}
n_covarites <- 6
n_features <- ncol(data_analysis) - n_covarites
```

## Run - all lipids

### Create empty objects

```{r}
outcome <- vector('double', n_features)
log2FD_VGdiet_inCZ <- vector('double', n_features)
log2FD_VGdiet_inIT <- vector('double', n_features)
log2FD_VGdiet_avg <- vector('double', n_features)

log2FD_ITcountry_avg <- vector('double', n_features)
diet_country_int <- vector('double', n_features)


P_VGdiet_inCZ <- vector('double', n_features)
P_VGdiet_inIT <- vector('double', n_features)
P_VGdiet_avg <- vector('double', n_features)

P_ITcountry_avg <- vector('double', n_features)
P_diet_country_int <- vector('double', n_features)


CI_L_VGdiet_inCZ <- vector('double', n_features)
CI_L_VGdiet_inIT <- vector('double', n_features)
CI_L_VGdiet_avg <- vector('double', n_features)

CI_U_VGdiet_inCZ <- vector('double', n_features)
CI_U_VGdiet_inIT <- vector('double', n_features)
CI_U_VGdiet_avg <- vector('double', n_features)
```

### Estimate over outcomes

```{r}
for (i in 1:n_features) {
  
  ## define variable
  data_analysis$outcome <- data_analysis[, (i + n_covarites)]

  ## fit model
  model <- lm(outcome ~ Country_IT * Diet_VEGAN, data = data_analysis)

  ## get contrast (effects of diet BY COUNTRY)
  contrast_emm <- summary(
    pairs(
      emmeans(
        model,
        specs = ~ Diet_VEGAN | Country_IT
        ),
      interaction = TRUE,
      adjust = "none"
      ),
    infer = c(TRUE, TRUE)
    )

  ## save results
  outcome[i] <- names(data_analysis)[i + n_covarites]
  
  ## country effect
  log2FD_ITcountry_avg[i] <- summary(model)$coefficients[
    which(
      names(model$coefficients) == "Country_IT"
    ), 1
  ]

  P_ITcountry_avg[i] <- summary(model)$coefficients[
    which(
      names(model$coefficients) == "Country_IT"
    ), 4
  ]
  
  ## diet effect
  tr <- confint(model)
  
  CI_L_VGdiet_avg[i] <- tr[which(row.names(tr) == 'Diet_VEGAN'),][1]
  CI_U_VGdiet_avg[i] <- tr[which(row.names(tr) == 'Diet_VEGAN'),][2]
  
  log2FD_VGdiet_avg[i] <- summary(model)$coefficients[
    which(
      names(model$coefficients) == "Diet_VEGAN"
    ), 1
  ]

  P_VGdiet_avg[i] <- summary(model)$coefficients[
    which(
      names(model$coefficients) == "Diet_VEGAN"
    ), 4
  ]
  
  log2FD_VGdiet_inCZ[i] <- -contrast_emm[1,3]
  P_VGdiet_inCZ[i] <- contrast_emm$p.value[1]
  CI_L_VGdiet_inCZ[i] <- -contrast_emm$upper.CL[1]
  CI_U_VGdiet_inCZ[i] <- -contrast_emm$lower.CL[1]
  
  log2FD_VGdiet_inIT[i] <- -contrast_emm[2,3]
  P_VGdiet_inIT[i] <- contrast_emm$p.value[2]
  CI_L_VGdiet_inIT[i] <- -contrast_emm$upper.CL[2]
  CI_U_VGdiet_inIT[i] <- -contrast_emm$lower.CL[2]
  
  ## interaction
  diet_country_int[i] <- summary(model)$coefficients[
    which(
      names(model$coefficients) == "Country_IT:Diet_VEGAN"
    ), 1
  ]

  P_diet_country_int[i] <- summary(model)$coefficients[
    which(
      names(model$coefficients) == "Country_IT:Diet_VEGAN"
    ), 4
  ]
}
```


### Results table

```{r}
result_lipidom <- data.frame(
  outcome,
  log2FD_ITcountry_avg, P_ITcountry_avg,
  log2FD_VGdiet_avg, P_VGdiet_avg,
  log2FD_VGdiet_inCZ, P_VGdiet_inCZ,
  log2FD_VGdiet_inIT, P_VGdiet_inIT,
  diet_country_int, P_diet_country_int,
  CI_L_VGdiet_avg, CI_U_VGdiet_avg,
  CI_L_VGdiet_inCZ, CI_U_VGdiet_inCZ,
  CI_L_VGdiet_inIT, CI_U_VGdiet_inIT
)
```

### Adjust p values

```{r}
result_lipidom <- result_lipidom %>% 
  dplyr::mutate(
    fdr_ITcountry_avg = p.adjust(P_ITcountry_avg, method = 'BH'),
    fdr_VGdiet_avg = p.adjust(P_VGdiet_avg, method = 'BH'),
    fdr_VGdiet_inCZ = p.adjust(P_VGdiet_inCZ, method = 'BH'),
    fdr_VGdiet_inIT = p.adjust(P_VGdiet_inIT, method = 'BH'),
    fdr_diet_country_int = p.adjust(P_diet_country_int, method = 'BH')
  ) %>% 
  dplyr::select(
    outcome,
    log2FD_ITcountry_avg, P_ITcountry_avg, fdr_ITcountry_avg,
    log2FD_VGdiet_avg, P_VGdiet_avg, fdr_VGdiet_avg,
    log2FD_VGdiet_inCZ, P_VGdiet_inCZ, fdr_VGdiet_inCZ,
    log2FD_VGdiet_inIT, P_VGdiet_inIT, fdr_VGdiet_inIT,
    diet_country_int, P_diet_country_int, fdr_diet_country_int,
    CI_L_VGdiet_avg, CI_U_VGdiet_avg,
    CI_L_VGdiet_inCZ, CI_U_VGdiet_inCZ,
    CI_L_VGdiet_inIT, CI_U_VGdiet_inIT
  )
```

### Show and save results

```{r}
kableExtra::kable(result_lipidom %>% filter(fdr_VGdiet_avg < 0.05),
  caption = "Result of linear models, modelling the log2-transformed level of given lipid, with `Diet`, `Country` and `Diet:Country` interaction as predictors. Only the lipids that differed significantly between diets are shown (FDR<0.05, average effect over both coutnries). `log2FD` prefix: implies estimated effects (regression coefficient), i.e. how much log2-transformed lipid level differ in vegans compared to omnivores, `P`: p-value, `fdr`: p-value after adjustment for multiple comparison, `CI_L` and `CI_U`: lower and upper bounds of 95% confidence interval respectively. `avg` suffix shows effect averaged across subgroups, whereas `inCZ` and `inIT` shows effect in Czech or Italian cohort respectively. All estimates in a single row are based on a single model"
)

if (file.exists("gitignore/result_lipidom.csv") == FALSE) {
  write.table(result_lipidom,
    "gitignore/result_lipidom.csv",
    row.names = FALSE
  )
}
```

## Run - train-validation intersection

```{r}
n_features <- ncol(data_analysis_narrowed) - n_covarites
```

### Create empty objects

```{r}
outcome <- vector('double', n_features)
log2FD_VGdiet_inCZ <- vector('double', n_features)
log2FD_VGdiet_inIT <- vector('double', n_features)
log2FD_VGdiet_avg <- vector('double', n_features)

log2FD_ITcountry_avg <- vector('double', n_features)
diet_country_int <- vector('double', n_features)


P_VGdiet_inCZ <- vector('double', n_features)
P_VGdiet_inIT <- vector('double', n_features)
P_VGdiet_avg <- vector('double', n_features)

P_ITcountry_avg <- vector('double', n_features)
P_diet_country_int <- vector('double', n_features)


CI_L_VGdiet_inCZ <- vector('double', n_features)
CI_L_VGdiet_inIT <- vector('double', n_features)
CI_L_VGdiet_avg <- vector('double', n_features)

CI_U_VGdiet_inCZ <- vector('double', n_features)
CI_U_VGdiet_inIT <- vector('double', n_features)
CI_U_VGdiet_avg <- vector('double', n_features)
```

### Estimate over outcomes

```{r}
for (i in 1:n_features) {
  
  ## define variable
  data_analysis_narrowed$outcome <- data_analysis_narrowed[, (i + n_covarites)]

  ## fit model
  model <- lm(outcome ~ Country_IT * Diet_VEGAN, data = data_analysis_narrowed)

  ## get contrast (effects of diet BY COUNTRY)
  contrast_emm <- summary(
    pairs(
      emmeans(
        model,
        specs = ~ Diet_VEGAN | Country_IT
        ),
      interaction = TRUE,
      adjust = "none"
      ),
    infer = c(TRUE, TRUE)
    )

  ## save results
  outcome[i] <- names(data_analysis_narrowed)[i + n_covarites]
  
  ## country effect
  log2FD_ITcountry_avg[i] <- summary(model)$coefficients[
    which(
      names(model$coefficients) == "Country_IT"
    ), 1
  ]

  P_ITcountry_avg[i] <- summary(model)$coefficients[
    which(
      names(model$coefficients) == "Country_IT"
    ), 4
  ]
  
  
  ## diet effect
  tr <- confint(model)
  
  CI_L_VGdiet_avg[i] <- tr[which(row.names(tr) == 'Diet_VEGAN'),][1]
  CI_U_VGdiet_avg[i] <- tr[which(row.names(tr) == 'Diet_VEGAN'),][2]
  
  log2FD_VGdiet_avg[i] <- summary(model)$coefficients[
    which(
      names(model$coefficients) == "Diet_VEGAN"
    ), 1
  ]

  P_VGdiet_avg[i] <- summary(model)$coefficients[
    which(
      names(model$coefficients) == "Diet_VEGAN"
    ), 4
  ]
  
  log2FD_VGdiet_inCZ[i] <- -contrast_emm[1,3]
  P_VGdiet_inCZ[i] <- contrast_emm$p.value[1]
  CI_L_VGdiet_inCZ[i] <- -contrast_emm$upper.CL[1]
  CI_U_VGdiet_inCZ[i] <- -contrast_emm$lower.CL[1]
  
  log2FD_VGdiet_inIT[i] <- -contrast_emm[2,3]
  P_VGdiet_inIT[i] <- contrast_emm$p.value[2]
  CI_L_VGdiet_inIT[i] <- -contrast_emm$upper.CL[2]
  CI_U_VGdiet_inIT[i] <- -contrast_emm$lower.CL[2]
  
  ## interaction
  diet_country_int[i] <- summary(model)$coefficients[
    which(
      names(model$coefficients) == "Country_IT:Diet_VEGAN"
    ), 1
  ]

  P_diet_country_int[i] <- summary(model)$coefficients[
    which(
      names(model$coefficients) == "Country_IT:Diet_VEGAN"
    ), 4
  ]
}
```


### Results table

```{r}
result_lipidom_narrowed <- data.frame(
  outcome,
  log2FD_ITcountry_avg, P_ITcountry_avg,
  log2FD_VGdiet_avg, P_VGdiet_avg,
  log2FD_VGdiet_inCZ, P_VGdiet_inCZ,
  log2FD_VGdiet_inIT, P_VGdiet_inIT,
  diet_country_int, P_diet_country_int,
  CI_L_VGdiet_avg, CI_U_VGdiet_avg,
  CI_L_VGdiet_inCZ, CI_U_VGdiet_inCZ,
  CI_L_VGdiet_inIT, CI_U_VGdiet_inIT
)
```

### Adjust p values

```{r}
result_lipidom_narrowed <- result_lipidom_narrowed %>% 
  dplyr::mutate(
    fdr_ITcountry_avg = p.adjust(P_ITcountry_avg, method = 'BH'),
    fdr_VGdiet_avg = p.adjust(P_VGdiet_avg, method = 'BH'),
    
    fdr_VGdiet_inCZ = p.adjust(P_VGdiet_inCZ, method = 'BH'),
    fdr_VGdiet_inIT = p.adjust(P_VGdiet_inIT, method = 'BH'),
    fdr_diet_country_int = p.adjust(P_diet_country_int, method = 'BH')
  ) %>% 
  dplyr::select(
    outcome,
    log2FD_ITcountry_avg, P_ITcountry_avg, fdr_ITcountry_avg,
    log2FD_VGdiet_avg, P_VGdiet_avg, fdr_VGdiet_avg,
    log2FD_VGdiet_inCZ, P_VGdiet_inCZ, fdr_VGdiet_inCZ,
    log2FD_VGdiet_inIT, P_VGdiet_inIT, fdr_VGdiet_inIT,
    diet_country_int, P_diet_country_int, fdr_diet_country_int,
    CI_L_VGdiet_avg, CI_U_VGdiet_avg,
    CI_L_VGdiet_inCZ, CI_U_VGdiet_inCZ,
    CI_L_VGdiet_inIT, CI_U_VGdiet_inIT
  )
```

### Save results

```{r}
kableExtra::kable(result_lipidom_narrowed %>% filter(fdr_VGdiet_avg < 0.05),
                  caption = "Result of linear models, modelling the log2-transformed level of given lipid, with `Diet`, `Country` and `Diet:Country` interaction as predictors. Only lipids which differ between diets significantly are shown (FDR < 0.05, average effect across both countries). `log2FD` prefix: implies estimated effects (regression coefficient), i.e. how much log2-transformed lipid level differ in vegans compared to omnivores, `P`: p-value, `fdr`: p-value after adjustment for multiple comparison, `CI_L` and `CI_U`: lower and upper bounds of 95% confidence interval respectively. `avg` suffix shows effect averaged across subgroups, whereas `inCZ` and `inIT` shows effect in Czech or Italian cohort respectively. All estimates in a single row are based on a single model"
                  ) 

if(file.exists('gitignore/result_lipidom_narrowed.csv') == FALSE){
  write.table(result_lipidom_narrowed, 
              'gitignore/result_lipidom_narrowed.csv', 
              row.names = FALSE)
  }
```

# Elastic net

To assess the predictive power of lipidome features on diet strategy, we employed Elastic Net logistic regression with lipids that were measured in both training and validating cohorts. 

As we expected very high level of co-linearity, we allowed $alpha$ to rather small (0, 0.2 or 0.4). All features were standardized by 2 standard deviations.

The performance of the predictive model was evaluated through their capacity of discriminate between vegan and omnivore diets, using out-of-sample area under ROC curve (AUC; estimated with out-of-bag bootstrap) as the measure of discriminatory capacity.

All features were transformed by 2 standard deviations (resulting in standard deviation of 0.5).

## Prepare data for `glmnet`


```{r}

data_lipids_glmnet <- data_lipids_original %>%
  na.omit() %>%
  dplyr::mutate(
    vegan = as.numeric(
      dplyr::if_else(
        Diet == "VEGAN", 1, 0
      )
    ),
    dplyr::across(
      `ACar 10:0`:`TG 18:1_18:1_20:4`, ~ arm::rescale(trans_lipid(.))
    )
  ) %>%
  dplyr::select(
    vegan,
    dplyr::everything()
  ) %>%
  dplyr::select(
    Sample, vegan,Country, `ACar 10:0`:`TG 18:1_18:1_20:4`
  )

data_lipids_glmnet_inter_CompletVal <- data_lipids_glmnet %>%
  dplyr::select(
    Sample, vegan, Country, 
    dplyr::all_of(
      intersect(
        colnames(
          data_lipids_validation
          ), colnames(
            data_lipids_glmnet
            )
        )
      )
    )

dim(data_lipids_glmnet_inter_CompletVal)
```

## Fit model

```{r}
modelac <- "elanet_lipid_inter_CompletVal"

assign(
  modelac,
  run(
    expr = clust_glmnet_sep(
      data = data_lipids_glmnet_inter_CompletVal,
      outcome = "vegan",
      clust_id = "Sample",
      sample_method = "oos_boot",
      N = 500,
      alphas = c(0, 0.2, 0.4),
      family = "binomial",
      seed = 478
    ),
    path = paste0("gitignore/run/", modelac)
  )
)
```

## Model summary

```{r}
elanet_lipid_inter_CompletVal$model_summary
elanet_lipid_inter_CompletVal$country_AUC
```

## ROC curve - internal validation

```{r}
#| fig.cap: "Receiver operating characteristic (ROC) curves from a random subset of out-of-bag bootstrap iterations, illustrating the model’s ability to discriminate between vegan and omnivore status based on standardized log2(lipid) levels. Each curve corresponds to an elastic net model trained on a bootstrap resample and evaluated on the subjects not included in that iteration (i.e., out-of-bag samples). The curve plots the true positive rate (sensitivity) against the false positive rate (1 – specificity) across thresholds of predicted vegan probability. The area under the curve (AUC) quantifies overall discriminatory performance, with values closer to 1 indicating stronger separation between groups."

elanet_lipid_inter_CompletVal$plot
```


$\rightarrow$ The observed performance (AUC ≈ 1) indicates near-perfect discrimination. Given the extremely strong signal in the lipidomic data—where several lipid levels show minimal overlap between diet groups—this result is plausible but may still raise concerns about overfitting or data leakage. To evaluate whether the observed performance could arise by chance under similar model complexity, we repeated the analysis using a dataset with randomly permuted diet labels (i.e., outcome reshuffling).

## Sensitivity analysis

```{r}
#| fig.cap: "Receiver operating characteristic (ROC) curves from a random subset of out-of-bag bootstrap iterations run on **data with randomly permuted diet labels**. As above with original data, each curve corresponds to an elastic net model trained on a bootstrap resample and evaluated on the subjects not included in that iteration (i.e., out-of-bag samples). The curve plots the true positive rate (sensitivity) against the false positive rate (1 – specificity) across thresholds of predicted vegan probability. The area under the curve (AUC) quantifies overall discriminatory performance, with values closer to 1 indicating stronger separation between groups"

## re-arrange data (permute outcome labels for sensitivity check
set.seed(2025)
data_lipids_glmnet_inter_CompletVal_sens <- data_lipids_glmnet_inter_CompletVal %>% 
  mutate(vegan2 = sample(data_lipids_glmnet_inter_CompletVal$vegan))

## verify I did what I wanted
mean(data_lipids_glmnet_inter_CompletVal_sens$vegan)
mean(data_lipids_glmnet_inter_CompletVal_sens$vegan2)

data_lipids_glmnet_inter_CompletVal_sens[1:20, c("vegan", "vegan2")]

## re-run as sensitivity analysis
data_lipids_glmnet_inter_CompletVal_sens <- data_lipids_glmnet_inter_CompletVal_sens %>% 
  select(-vegan)

modelac <- "elanet_lipid_inter_CompletVal_sens"

assign(
  modelac,
  run(
    expr = clust_glmnet_sep(
      data = data_lipids_glmnet_inter_CompletVal_sens,
      outcome = "vegan2",
      clust_id = "Sample",
      sample_method = "oos_boot",
      N = 40,
      alphas = c(0, 0.2, 0.4),
      family = "binomial",
      seed = 478
    ),
    path = paste0("gitignore/run/", modelac)
  )
)

elanet_lipid_inter_CompletVal_sens$model_summary
elanet_lipid_inter_CompletVal_sens$country_AUC

elanet_lipid_inter_CompletVal_sens$plot
```

$\rightarrow$ After randomly permuting diet labels and rerunning the full modelling pipeline, the out‑of‑sample AUC fell to 0.47 (95% CI: 0.34 to 0.59), consistent with chance performance and indicating no evidence of data leakage or systematic overfitting under label randomization.

## Estimated coefficients

```{r}
elanet_lipid_inter_CompletVal$betas
```

## Plot beta coefficients

```{r, fig.height=10, fig.width=5}
#| fig.cap: "Regression coefficients from the elastic net model predicting vegan diet strategy based on log2-transformed and standardized lipide levels. Lipids are ordered by the magnitude of the standardized coefficients, indicating their relative importance in distinguishing between the diet groups. The sign of each coefficient indicates the direction of association with vegan diet status, with positive values indicating a higher likelihood of vegan status and negative values indicating omnivore status. Lipids whose effects were shrunk to zero are not shown."

elacoef <- data.frame(
  lipid = row.names(elanet_lipid_inter_CompletVal$betas),
  beta_ela = elanet_lipid_inter_CompletVal$betas[, 1]
) %>%
  arrange(abs(beta_ela)) %>%
  filter(abs(beta_ela) > 0,
         !grepl('Intercept', lipid)) %>%
  mutate(lipid = factor(lipid))


plotac <- "elanet_beta_lipids"
path <- "gitignore/figures"

assign(plotac, 
       ggplot(elacoef,
       aes(
         x = lipid,
         y = beta_ela)
       ) +
  geom_point() +
  geom_hline(yintercept = 0, color = "black") +
  labs(
    y = "Standardized beta coefficients",
    x = "Lipid"
  ) +
  theme_minimal() +
  coord_flip() + 
  theme(
    axis.text.x = element_text(size = 10),
    axis.text.y = element_text(size = 10),
    axis.title.x = element_text(size = 12),
    axis.title.y = element_text(size = 12),
    legend.position = "bottom"
  )
)

if (file.exists(paste0(path, "/", plotac, ".svg")) == FALSE) {
    ggsave(
    path = paste0(path),
    filename = plotac,
    device = "svg",
    width = 5,
    height = 10
  )
}

get(plotac)
```


# External validation

External validation was performed with an independent Czech cohort. 

As a first step, we will use the previously developed and validated elastic net model to predict vegan status in the independent Czech cohort. The validation data will be standardized using the mean and standard deviation of each lipid from the training cohort to ensure comparability across datasets. For each subject in the external validation cohort, we will estimate the predicted probability of being vegan using the elastic net model. This predicted probability will then be used as a variable to discriminate between the diet groups in the independent cohort.

In a 2nd step, we will look at lipids that significantly differed between diet groups (average vegan diet effect across both countries, FDR < 0.05) estimated with linear models (one per lipid) with training cohort. Then we will fit linear models also for external validation cohort. Effect of vegan diet on these lipids will be shown along with 95% confidence interval for all cohorts: training Czech and Italian cohorts, but also in Czech independent (validating) cohort

## Prediction of diet (elastic net)

### Get table of weights, means and SDs

```{r, warning=FALSE}

coefs_lipids_CompletVal <- get_coef(
  original_data = data_analysis,
  glmnet_model = elanet_lipid_inter_CompletVal)

coefs_lipids_CompletVal

```

### Identify shared and missing predictors

```{r}
## Which are missing in the validation set
missing <- setdiff(
  coefs_lipids_CompletVal$predictor[-1], 
  colnames(
    data_lipids_validation
    )
  )

## Which are common with the validations et
common_predictors <- intersect(
  coefs_lipids_CompletVal$predictor, 
  colnames(data_lipids_validation))
```

### Standardize data in validation set 

```{r}
data_lipids_validation_pred_CompletVal <- data_lipids_validation %>%
  dplyr::mutate(
    vegan = if_else(
      X2 == "VEGAN", 1, 0
    )
  ) %>%
  dplyr::select(
    vegan,
    dplyr::all_of(common_predictors)
  ) %>% 
  dplyr::mutate(
    across(
      .cols = -vegan,
      .fns = trans_lipid
      )
    ) %>% 
  dplyr::mutate(
    across(
      .cols = -vegan,
      .fns = ~ . 
      - coefs_lipids_CompletVal$mean[
        match(
          cur_column(), 
          coefs_lipids_CompletVal$predictor
          )
        ]
      )
    ) %>% 
  dplyr::mutate(
    across(
      .cols = -vegan,
      .fns = ~ . 
      / coefs_lipids_CompletVal$SD[
        match(
          cur_column(), 
          coefs_lipids_CompletVal$predictor
          )
        ]
      )
    ) 
```

### Results of external validation

#### Figure 

```{r}
#| fig.cap: "Receiver operating characteristics (ROC) curve showing the model’s ability to discriminate between vegan and omnivore status according to lipids log2(level) in the external validation Czech cohort. The curve plots the true positive rate (sensitivity) against the true positive rate (specificity) at various thresholds of predicted vegan status, as estimated from the elastic net model developed on the training data. The area under the curve (AUC) represents the model's overall performance, with values closer to 1 indicating stronger discrimination."

elanet_lipid_inter_CompletVal$fit

newx <- as.matrix(data_lipids_validation_pred_CompletVal[,-1])

predicted <- predict(
  elanet_lipid_inter_CompletVal$fit, 
  newx = newx)

tr <- data_lipids_validation_pred_CompletVal %>% 
  dplyr::mutate(
    predicted_logit = as.numeric(
      predict(
        elanet_lipid_inter_CompletVal$fit,
        newx = newx
        )
      )
    ) %>% 
  dplyr::mutate(
    predicted = inv_logit(predicted_logit)
  )

roc_lipid_CompletVal <- pROC::roc(
      vegan ~ predicted_logit,
      data = tr,
      direction = "<",
      levels = c(0, 1),
      ci = TRUE
      )

roc_lipid_CompletVal


plotac <- "roc_lipid"
path <- "gitignore/figures"

assign(plotac, ggroc(roc_lipid_CompletVal))
get(plotac)

if (file.exists(paste0(path, "/", plotac, ".svg")) == FALSE) {  
  ggsave(
    path = paste0(path),
    filename = plotac,
    device = "svg",
    width = 6,
    height = 4.5
  )
}
```

#### Table

```{r}

roc_lipid_CompletVal
mod <- elanet_lipid_inter_CompletVal

trainAUC <- mean(mod[["valid_performances"]]$auc_resamp_test)
trainCI <- quantile(mod[["valid_performances"]]$auc_resamp_test,
  probs = c(1 / 40, 39 / 40))

res <- data.frame(
  alpha = c(mod$model_summary$alpha, rep("", 4)),
  lambda = c(round(mod$model_summary$lambda, 4), rep("", 4)),
  `performance type` = c(
 "Training set AUC",
"Out-of-sample AUC (all)",
"Out-of-sample AUC (Czech)",
"Out-of-sample AUC (Italy)",
"External validation AUC"
  ),
  `performance [95% CI]` = c(
    sprintf("%.3f [%.3f to %.3f]", trainAUC, trainCI[1], trainCI[2]),
    sprintf("%.3f [%.3f to %.3f]",
            mod$model_summary$auc_OutOfSample,
            mod$model_summary$auc_oos_CIL,
            mod$model_summary$auc_oos_CIU),
    sprintf("%.3f [%.3f to %.3f]",
            mod$country_AUC$auc_OutOfSample_CZ,
            mod$country_AUC$auc_oos_CIL_CZ,
            mod$country_AUC$auc_oos_CIU_CZ),
    sprintf("%.3f [%.3f to %.3f]",
            mod$country_AUC$auc_OutOfSample_IT,
            mod$country_AUC$auc_oos_CIL_IT,
            mod$country_AUC$auc_oos_CIU_IT),
    sprintf("%.3f [%.3f to %.3f]",
            roc_lipid_CompletVal[["ci"]][2],
            roc_lipid_CompletVal[["ci"]][1],
            roc_lipid_CompletVal[["ci"]][3])
  )
)


kableExtra::kable(
  res %>% mutate(across(where(is.numeric), ~ round(.x, 3))),
  caption = 'Performance of the elastic‑net logistic regression model for discriminating vegan from omnivore status using log2‑transformed lipid levels. The model was developed on the combined training data (Czech and Italian cohorts), with the optimmized `alpha` (mixing parameter) and `lambda` (penalty strength) selected via 10-fold cross-validation. Internal validation employed 500 out‑of‑bag bootstrap resamples: the out‑of‑sample AUC is the mean across resamples, and its 95 % confidence interval (CI) is given by the 2.5th and 97.5th percentiles of the bootstrap distribution. The training‑set AUC and its CI were computed analogously from the in‑bag predictions. External validation was carried out on an independent Czech cohort; the reported AUC is the point estimate on that cohort, and its 95% CI was obtained with DeLong’s method.'
)
```


## Diet effect across datasets

Similarly as in training data cohorts, we will fit linear model per each of the selected lipid level ($log_{2}$ - transformed), with a single fixed effect factor of `diet`. 

### Linear models in validation cohort

```{r}
## relevant lipids
diet_sensitive_lipids_narrowed <- result_lipidom_narrowed %>%
  filter(
    fdr_VGdiet_avg < 0.05,
    outcome %in% common_lipids
  ) %>%
  select(
    outcome
  ) %>% 
  pull()

len <- length(diet_sensitive_lipids_narrowed)

data_analysis_lipids <- data_lipids_validation %>%
  dplyr::mutate(
    Diet_VEGAN = as.numeric(
      dplyr::if_else(
        X2 == 'VEGAN', 1, 0
      )
    ),
    dplyr::across(
      all_of(common_lipids), ~ trans_lipid(.)
    )
  ) %>%
  dplyr::select(
    Diet_VEGAN,
    all_of(diet_sensitive_lipids_narrowed)
  ) 
```

Define number of lipids and covariates

```{r}
n_covarites <- 1
n_features <- ncol(data_analysis_lipids) - n_covarites
```

Create empty objects

```{r}
outcome <- vector('double', n_features)
log2FD_VGdiet <- vector('double', n_features)
P_VGdiet <- vector('double', n_features)
CI_L_VGdiet <- vector('double', n_features)
CI_U_VGdiet <- vector('double', n_features)
```

Fit linear models per outcome

```{r}
for (i in 1:n_features) {
  ## define variable
  data_analysis_lipids$outcome <- data_analysis_lipids[, (i + n_covarites)]

  ## fit model
  model <- lm(outcome ~ Diet_VEGAN, data = data_analysis_lipids)

  ## save results
  outcome[i] <- names(data_analysis_lipids)[i + n_covarites]

  ## diet effect
  tr <- confint(model)

  CI_L_VGdiet[i] <- tr[which(row.names(tr) == "Diet_VEGAN"), ][1]
  CI_U_VGdiet[i] <- tr[which(row.names(tr) == "Diet_VEGAN"), ][2]

  log2FD_VGdiet[i] <- summary(model)$coefficients[
    which(
      names(model$coefficients) == "Diet_VEGAN"
    ), 1
  ]

  P_VGdiet[i] <- summary(model)$coefficients[
    which(
      names(model$coefficients) == "Diet_VEGAN"
    ), 4
  ]
}
```


#### Results table

```{r}
result_lipids_val <- data.frame(
  outcome,
  log2FD_VGdiet, P_VGdiet,
  CI_L_VGdiet, CI_U_VGdiet
)

kableExtra::kable(result_lipids_val,
                  caption = 'Results of linear models estimating the effect of diet on lipid levels. Only lipids that significantly differed between diet groups in training cohorts (FDR < 0.05, average effect across both training cohorts) were included. `log2FD` represents the estimated effects (regression coefficient), indicating how much the log2-transformed lipid levels differ between vegans and omnivores. `P`: p-value, `fdr`: p-value adjusted for multiple comparisons, and `CI_L` and `CI_U` represent the lower and upper bounds of the 95% confidence interval, respectively. All estimates in a single row are based on a single model.') 

if(file.exists('gitignore/result_lipidom_validation.csv') == FALSE){
  write.table(result_lipids_val, 'gitignore/result_lipidom_validation.csv', row.names = FALSE)
  }
```

### Forest plot

#### Data preparation

```{r}

## subset result tables
result_lipids_subset <- result_lipidom %>%
  filter(outcome %in% diet_sensitive_lipids_narrowed)

result_lipids_val_subset <- result_lipids_val %>%
  filter(outcome %in% diet_sensitive_lipids_narrowed)

## create a data frame
data_forest <- data.frame(
  outcome = rep(diet_sensitive_lipids_narrowed, 3),
  beta = c(
    result_lipids_subset$log2FD_VGdiet_inCZ,
    result_lipids_subset$log2FD_VGdiet_inIT,
    result_lipids_val_subset$log2FD_VGdiet
  ),
  lower = c(
    result_lipids_subset$CI_L_VGdiet_inCZ,
    result_lipids_subset$CI_L_VGdiet_inIT,
    result_lipids_val_subset$CI_L_VGdiet
  ),
  upper = c(
    result_lipids_subset$CI_U_VGdiet_inCZ,
    result_lipids_subset$CI_U_VGdiet_inIT,
    result_lipids_val_subset$CI_U_VGdiet
  ),
  dataset = c(
    rep("CZ", len),
    rep("IT", len),
    rep("Validation", len)
  )
)

validation_order <- data_forest %>%
  filter(dataset == "Validation") %>%
  arrange(beta) %>%
  pull(outcome)

up_winners <- data_forest %>% 
  pivot_wider(names_from = dataset,
              values_from = c(beta, lower, upper)) %>% 
  left_join(
    elacoef %>% mutate(outcome = lipid) %>% select(-lipid), 
    by = 'outcome') %>% 
  filter(beta_CZ > 0,
         beta_IT > 0,
         lower_Validation > 0,
         beta_ela > 0.1) %>% 
  select(outcome)

down_winners <- data_forest %>% 
  pivot_wider(names_from = dataset,
              values_from = c(beta, lower, upper)) %>% 
  left_join(elacoef %>% mutate(outcome = lipid) %>% select(-lipid),
            by = 'outcome') %>% 
  filter(beta_CZ < 0,
         beta_IT < 0,
         upper_Validation < 0,
         beta_ela < -0.1) %>% 
  select(outcome)

winners <- as.character(c(up_winners$outcome, down_winners$outcome))

 data_forest <- data_forest %>%
  mutate(in_winner = if_else(outcome %in% winners, TRUE, FALSE, missing = FALSE)) %>%
  left_join(
    elacoef %>% mutate(outcome = lipid) %>% select(-lipid), 
    by = 'outcome') %>%  
   mutate(outcome = factor(outcome, levels = validation_order))
```

#### Plotting

```{r, fig.height=16, fig.width=6}
#| fig.cap: "The forest plot illustrates the effects of a vegan diet on the levels of selected log2-transformed lipid lelves, along with their 95% confidence intervals, across two training cohorts (Czech and Italian) and one independent Czech cohort (validation). Points/lines in green, blue and grey colors represent the difference in lipid levels between vegans and omnivores within the Italian, Czech and validation cohort respectively. Positive values suggest a higher lipid level in vegans compared to omnivores. Only lipids that showed significant differences between vegan and omnivorous diets in training cohorts (FDR < 0.05, average effect across both countries) were selected, and these effects were further validated in the independent cohort. The estimates for the training cohorts were obtained from a single linear model that included `Diet`, `Country`, and the interaction term `Diet:Country` as predictors. In the validation cohort, `Diet` was the only fixed-effect predictor. Lipids validated in the linear model and showing predictive power in the elastic net model (|β| > 0.1) are **bold**"

colors <- c("CZ" = "#150999", "IT" = "#329243", "Validation" = "grey60")

plotac <- "forest_lipid"
path <- "gitignore/figures"

assign(
  plotac,
  ggplot(data_forest, aes(x = outcome, y = beta, ymin = lower, ymax = upper, color = dataset)) +
    geom_pointrange(position = position_dodge(width = 0.5), size = 0.5) +
    geom_hline(yintercept = 0, color = "black") +
    geom_errorbar(position = position_dodge(width = 0.5), width = 0.2) +
    scale_color_manual(values = colors) +
    labs(
      y = "Effect of vegan diet on log2-trasformed lipid level",
      x = "Outcome",
      color = "Dataset"
    ) +
    theme_minimal() +
    coord_flip() +
    scale_x_discrete(
    labels = setNames(
      ifelse(data_forest$in_winner, 
             paste0("**", data_forest$outcome, "**"), 
             as.character(data_forest$outcome)
      ), data_forest$outcome
    )
  ) +
  theme(
    axis.text.x = element_text(size = 10),
    axis.text.y = ggtext::element_markdown(size = 10),  
    axis.title.x = element_text(size = 12),
    axis.title.y = element_text(size = 12),
    legend.position = "bottom"
  )
)

get(plotac)

if (file.exists(paste0(path, "/", plotac, ".svg")) == FALSE) {
  ggsave(
    path = paste0(path),
    filename = plotac,
    device = "svg",
    width = 6,
    height = 16
  )
}
```

### Boxplot

```{r, fig.height=16, fig.width=14, warning=FALSE}
#| fig.cap: "Log2-traqnsformed lipids levels across all 3 cohorts (Czech and Italian training cohorts and an independent Czech valdiation cohort) and across dietary groups"

plotac <- "boxplot_lipidom"
path <- "gitignore/figures"

colo <- c('#F9FFAF','#329243')

boxplot_cond <- function(variable) {
  
  p <- ggboxplot(data_merged_log2, 
                 x = 'Diet', 
                 y = variable, 
                 fill = 'Diet', 
                 tip.length = 0.15,
                 palette = colo,
                 outlier.shape = 1,
                 lwd = 0.25,
                 outlier.size = 0.8,
                 facet.by = 'Data',
                 title = variable,
                 ylab = 'Log2(lipid level)') +
    
    theme(
      plot.title = element_text(size = 10), 
      axis.title = element_text(size = 8),  
      axis.text.y = element_text(size = 7),
      axis.text.x = element_blank(),
      axis.title.x = element_blank()
    ) 
  return(p)
}

# Plot all outcomes
plots <- map(diet_sensitive_lipids_narrowed, boxplot_cond)

# Create a matrix of plots
assign(plotac, 
       ggarrange(plotlist = plots, ncol = 7, nrow = 13,  common.legend = TRUE)
       )

get(plotac)

if (file.exists(paste0(path, "/", plotac, ".svg")) == FALSE) {  
  ggsave(
    path = paste0(path),
    filename = plotac,
    device = "svg",
    width = 16,
    height = 14
  )
}
```


# Reproducibility

```{r}
sessionInfo()
```
