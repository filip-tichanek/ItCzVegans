---
title: "Vegan-specific signature implies healthier metabolic profile: findings from diet-related multi-omics observational study based on different European populations"
subtitle: "Statistical report for pathway analysis"
format: 
  html:  
    embed-resources: true
    keep-md: false
    toc: true
    toc-expand: 3
    toc-depth: 4
    toc-location: left
    number-sections: true
    number-depth: 4
    code-fold: true
    code-tools: true
    code-summary: "Open code"
    grid: 
      body-width: 1000px
      sidebar-width: 600px
      margin-width: 100px
editor: source
project:
  type: default
  output-dir: output
theme: darkly
highlight-style: github-dark
fontsize: 12 px
code-block-bg: "#2D2D31"
bibliography: references.bib
fontcolor: "#D1D1D1"
monobackgroundcolor: "#3B3B3B"
---

------------------------------------------------------------------------

```{r setup, echo=FALSE}
knitr::opts_chunk$set(collapse = TRUE)
```

```{css, echo=FALSE}
code.sourceCode {
  font-size: 0.86em;
  border: 1px solid #ffffff; 
  padding: 9px; 
}

code{
    color: #EEE8AA; 
    background: #96464D
}

.equation {
  text-align: center;
  display: block;
  margin: auto;
}

body {
  text-align: justify;
}
```


{{< include README.md >}}


# Initiation

## Set home directory

```{r}
setwd('/home/ticf/secured_data/GitRepo/ticf/478_MOCA_italian')
```

## Upload initiation file

```{r}
source('478_initiation.R')
```

# Data

## Upload and epxlore

### Get pathways 

Only these pathways that have non-zero values in all observation in at least one dataset will be chosen

```{r}
data_path_originalCZ <- read.delim(
  "gitignore/data/pathw/Pathway_abundance_MetaCyc_CZ_humann.tsv",
  header = TRUE, sep = "\t"
) %>%
  filter(!grepl("\\|", X..Pathway)) %>%
  select(X..Pathway)
dim(data_path_originalCZ)


data_path_originalIT <- read.delim(
  "gitignore/data/pathw/Pathway_abundance_MetaCyc_IT_humann.tsv",
  header = TRUE, sep = "\t"
) %>%
  filter(!grepl("\\|", X..Pathway)) %>%
  select(X..Pathway)
dim(data_path_originalIT)


data_path_validation <- read.delim(
  "gitignore/data/pathw/Pathway_abundance_MetaCyc_Validation_humann.tsv",
  header = TRUE, sep = "\t"
) %>%
  filter(!grepl("\\|", X..Pathway)) %>%
  select(X..Pathway)
dim(data_path_validation)


tr <- intersect(
  data_path_originalCZ$X..Pathway,
  data_path_originalIT$X..Pathway
)

paths <- intersect(tr, data_path_validation$X..Pathway)
length(paths)
```


### Italian data

```{r}
data_path_originalIT <- read.delim(
  'gitignore/data/pathw/Pathway_abundance_MetaCyc_IT_humann.tsv',  
  header = TRUE, sep = "\t"
  ) %>% 
  filter(X..Pathway %in% paths)

features <- data_path_originalIT[,1]
split_features <- strsplit(features, ": ")
feature_name <- sapply(split_features, `[`, 1)
feature_description <- sapply(split_features, `[`, 2)
feature_name <- gsub(" |-", "_", feature_name)

row.names(data_path_originalIT) <- c(feature_name)
data_path_originalIT <- data.frame(t(data_path_originalIT[,-1]))
attr(data_path_originalIT, "description") <- feature_description


originalIT_features <- data_path_originalIT%>%
  select(where(~ mean(. == 0) < 0.7)) %>% 
  select(-UNMAPPED, -UNINTEGRATED) %>% 
  colnames()
```


### Czech data

```{r}
data_path_originalCZ <- read.delim(
  'gitignore/data/pathw/Pathway_abundance_MetaCyc_CZ_humann.tsv',  
  header = TRUE, sep = "\t"
  ) %>% 
  filter(X..Pathway %in% paths)

features <- data_path_originalCZ[,1]
split_features <- strsplit(features, ": ")
feature_name <- sapply(split_features, `[`, 1)
feature_description <- sapply(split_features, `[`, 2)
feature_name <- gsub(" |-", "_", feature_name)

row.names(data_path_originalCZ) <- c(feature_name)
data_path_originalCZ <- data.frame(t(data_path_originalCZ[,-1]))
attr(data_path_originalCZ, "description") <- feature_description
 
originalCZ_features <- data_path_originalCZ %>%
  select(where(~ mean(. == 0) < 0.7)) %>% 
  select(-UNMAPPED, -UNINTEGRATED) %>% 
  colnames()
```


### Validation data

```{r}
data_pathways_validation <- read.delim(
  'gitignore/data/pathw/Pathway_abundance_MetaCyc_Validation_humann.tsv', 
  header = TRUE, 
  sep = "\t"
  ) %>% 
  filter(X..Pathway %in% paths)

features <- data_pathways_validation[,1]
split_features <- strsplit(features, ": ")
feature_name <- sapply(split_features, `[`, 1)
feature_description <- sapply(split_features, `[`, 2)
feature_name <- gsub(" |-", "_", feature_name)

row.names(data_pathways_validation) <- c(feature_name)
data_pathways_validation <- data.frame(t(data_pathways_validation[,-1]))
attr(data_pathways_validation, "description") <- feature_description
row.names(data_pathways_validation) <- gsub("^X", "K", row.names(data_pathways_validation))

validation_features <- data_pathways_validation %>%
  select(-UNMAPPED, -UNINTEGRATED) %>% 
  colnames()
```

### Merging data

Modify data

```{r, warning=FALSE}

# which taxa
set.seed(478)

features <- intersect(originalIT_features, originalCZ_features)
features <- intersect(features, validation_features)


# CZ
data_path_originalCZ_filtered <- data_path_originalCZ %>%
  select(any_of(features))

data_path_originalCZ_filtered <- data_path_originalCZ_filtered/ rowSums(data_path_originalCZ_filtered)

data_path_originalCZ_filtered <- data_path_originalCZ_filtered %>% 
  mutate(
    ID = row.names(.),
    Country = 'CZ'
  ) %>% 
  select(ID, Country, any_of(features))

# IT
data_path_originalIT_filtered <- data_path_originalIT %>%
  select(any_of(features))

data_path_originalIT_filtered <- data_path_originalIT_filtered/ rowSums(data_path_originalIT_filtered)

data_path_originalIT_filtered <- data_path_originalIT_filtered %>% 
  mutate(
    ID = row.names(.),
    Country = 'IT'
  ) %>% 
  select(ID, Country, any_of(features))

# joining the table

data_path_original_filtered <- bind_rows(data_path_originalIT_filtered,
                                         data_path_originalCZ_filtered)

bacteria_data <- data_path_original_filtered %>% 
  select(all_of(features))

if (file.exists("gitignore/data_path_original_impCLR.RData") == FALSE) {
  
  bacteria_data_imp <- lrSVD(
    bacteria_data,
    label = 0, 
    dl = NULL, 
    z.delete = FALSE, 
    ncp = 2
  )

  row.names( bacteria_data_imp) <- row.names(bacteria_data) 
  
  bacteria_data <- data.frame(clr(bacteria_data_imp)) %>%
    mutate(ID = row.names(.))

  training_metadata <- read.xlsx("gitignore/data/lipidome_training_cohort.xlsx") %>%
    select(Sample, Diet) %>%
    mutate(ID = Sample) %>%
    select(-Sample)

  data_path_original_filtered <- data_path_original_filtered %>%
    select(ID, Country) %>%
    left_join(bacteria_data, by = "ID")

  data_pathways_original_clr <- data_path_original_filtered %>%
    mutate(
      Data = if_else(Country == "CZ", "CZ_tr", "IT_tr")
    ) %>%
    left_join(training_metadata, by = "ID") %>%
    select(ID, Diet, Country, Data, everything())

  save(
    data_pathways_original_clr,
    file = "gitignore/data_path_original_impCLR.RData"
  )
}

load("gitignore/data_path_original_impCLR.RData")

if (file.exists("gitignore/data_pathways_original_impCLR.csv") == FALSE)
  write.csv(data_pathways_original_clr,
            "gitignore/data_pathways_original_impCLR.csv")

## Show variances of CLR proportions across samples
data_variance <- data_pathways_original_clr %>%
  rowwise() %>%   
  mutate(variance = var(c_across(-(ID:Data)))) %>%  
  ungroup() %>%       
  select(ID, variance)

## Look at distribution
hist(data_variance$variance)

## Show extreme samples
data_variance %>% arrange(desc(variance))
```


Get diet `information`Diet` from another dataset for **validating** data

```{r, warning = FALSE}
validation_metadata <- read.xlsx('gitignore/data/lipidome_validation_cohort.xlsx') %>% 
  select(X1, X2) %>% 
  mutate(ID = X1,
         Diet = X2) %>% 
  select(-X1, -X2)

data_pathways_validation_filtered <- data_pathways_validation %>% 
  select(any_of(features))

set.seed(478)

data_pathways_validation_filtered <-  (data_pathways_validation_filtered/
  rowSums(data_pathways_validation_filtered ))

if (file.exists("gitignore/data_pathways_validation_impCLR.RData") == FALSE) {
  
  data_pathways_validation_filtered_imp <- lrSVD(
    data_pathways_validation_filtered,
    label = 0, dl = NULL, z.delete = FALSE
  )

row.names(data_pathways_validation_filtered_imp) <- row.names(data_pathways_validation_filtered)

  data_pathways_validation_clr <- data.frame(
    clr(data_pathways_validation_filtered_imp)
  ) %>%
    mutate(
      ID = row.names(.),
      Country = "CZ",
      Data = "valid"
    ) %>%
    left_join(validation_metadata, by = "ID") %>%
    select(ID, Diet, Country, Data, any_of(features)) %>%
    filter(!is.na(Diet))

  ## Add Diet for K284 which has the diet missing
  data_pathways_validation_clr[
    which(data_pathways_validation_clr$ID == "K284"), "Diet"
  ] <- "VEGAN"


  save(
    data_pathways_validation_clr, 
    file = "gitignore/data_pathways_validation_impCLR.RData"
  )
}

load("gitignore/data_pathways_validation_impCLR.RData")

if (file.exists("gitignore/data_pathways_validation_impCLR.csv") == FALSE)
  write.csv(data_pathways_validation_clr,
            "gitignore/data_pathways_validation_impCLR.csv")

## Show variances of CLR proportions across samples
data_variance <- data_pathways_validation_clr %>%
  rowwise() %>%   
  mutate(variance = var(c_across(-(ID:Data)))) %>%  
  ungroup() %>%       
  select(ID, variance)

## Look at distribution
hist(data_variance$variance)

## Show extreme samples
data_variance %>% arrange(desc(variance))
```


### Merge training and validation dataset

```{r}
data_merged <- bind_rows(
  data_pathways_original_clr,
  data_pathways_validation_clr
)
```


## Explore


#### Distributions 

The following plot will show distribution of 36 randomly selected pathways

```{r, fig.height=12, fig.width=9}
size = c(6,6)
check <- data_pathways_original_clr[, 5:ncol(data_pathways_original_clr)]

check <- check[, sample(1:ncol(check), size[1]*size[2])]


par(mfrow = c(size[1],size[2]))
par(mar=c(2,1.5,2,0.5))

for(x in 1:ncol(check)){
  hist(check[,x], 
       16, 
       col='blue', 
       main = paste0(colnames(check)[x])
  )
}
  
```

Data seems to have relatively symmetric distribution

#### Pathways accross groups

```{r, fig.height=12, fig.width=12, warning=FALSE}
#| fig.cap: "Levels of pathways across all 3 cohorts (Czech and Italian training cohorts and an independent Czech valdiation cohort) and across dietary groups"

set.seed(478)
colo <- c('#F9FFAF','#329243')

outcomes <- data.frame(
  variable = data_merged %>% 
    select(any_of(sample(features, 35))) %>% 
    colnames()
)

boxplot_cond <- function(variable) {
  
  
  p <- ggboxplot(data_merged, 
                 x = 'Diet', 
                 y = variable, 
                 fill = 'Diet', 
                 tip.length = 0.15,
                 palette = colo,
                 outlier.shape = 1,
                 lwd = 0.25,
                 outlier.size = 0.8,
                 facet.by = 'Data',
                 title = variable,
                 ylab = 'pathway level') +
    
    theme(
      plot.title = element_text(size = 10), 
      axis.title = element_text(size = 8),  
      axis.text.y = element_text(size = 7),
      axis.text.x = element_blank(),
      axis.title.x = element_blank()
    ) 
    
  
  return(p)
}

# Plot all outcomes
plots <- map(outcomes$variable, boxplot_cond)

# Create a matrix of plots
plots_arranged <- ggarrange(plotlist = plots, ncol = 5, nrow = 7,  common.legend = TRUE)
plots_arranged
```

# Linear models across pathways

We will fit a feature-specific linear model where the clr-transformed pathway represents the outcome variable whereas `country` (Italy vs Czech), `diet` (vegan vs omnivore), and their interaction (`country:diet`) all represent fixed-effects predictors. So, each model has following form

$$
clr(\text{pathway level}) = \alpha + \beta_{1} \times \text{country} + \beta_{2} \times \text{diet} + \beta_{3} \times \text{country:diet} + \epsilon
$$

The variables were coded as follows: $diet = -0.5$ for omnivores and $diet = 0.5$ for vegans; $country = -0.5$ for the Czech cohort and $country = 0.5$ for the Italian cohort.   
This parameterization allows us to interpret the linear model `summary` output as presenting the conditional effects of `diet` averaged across both countries and the conditional effects of `country` averaged across both diet groups. We will then use the `emmeans` package [@emmeans-2] to obtain specific estimates for the effect of `diet` in the Italian and Czech cohorts separately, still from a single model.

pathways that will show a significant diet effect (average effect of `diet` across both countries, adjusted for multiple comparisons with FDR < 0.05) will be then visualized using a forest plot, with country-specific diet effect along with diet effect based on independent validation cohort, to evaluate how generalizable are these findings. 




## Select and wrangle data 

```{r}
data_analysis_pathways <- data_pathways_original_clr %>%
  na.omit() %>%
  dplyr::mutate(
    Diet_VEGAN = as.numeric(
      dplyr::if_else(
        Diet == "VEGAN", 0.5, -0.5
      )
    ),
    Country_IT = as.numeric(
      dplyr::if_else(
        Country == "IT", 0.5, -0.5
      )
    ),
    ) %>%
  dplyr::select(
    ID,
    Country,
    Country_IT,
    Diet,
    Diet_VEGAN,
    dplyr::everything()
  )

summary(data_analysis_pathways[ , 1:12])

data_analysis_pathways[1:5 , 1:8]
```

### Define number of pathways and covariates

```{r}
n_covarites <- 6
n_features <- ncol(data_analysis_pathways) - n_covarites
```

### Create empty objects

```{r}
outcome <- vector('double', n_features)
est_VGdiet_inCZ <- vector('double', n_features)
est_VGdiet_inIT <- vector('double', n_features)
est_VGdiet_avg <- vector('double', n_features)

est_ITcountry_avg <- vector('double', n_features)
diet_country_int <- vector('double', n_features)


P_VGdiet_inCZ <- vector('double', n_features)
P_VGdiet_inIT <- vector('double', n_features)
P_VGdiet_avg <- vector('double', n_features)

P_ITcountry_avg <- vector('double', n_features)
P_diet_country_int <- vector('double', n_features)

CI_L_VGdiet_inCZ <- vector('double', n_features)
CI_L_VGdiet_inIT <- vector('double', n_features)
CI_L_VGdiet_avg <- vector('double', n_features)

CI_U_VGdiet_inCZ <- vector('double', n_features)
CI_U_VGdiet_inIT <- vector('double', n_features)
CI_U_VGdiet_avg <- vector('double', n_features)
```

## Run linear models over pathways

```{r}

for (i in 1:n_features) {
  
  ## define variable
  data_analysis_pathways$outcome <- data_analysis_pathways[, (i + n_covarites)]

  ## fit model
  model <- lm(outcome ~ Country_IT * Diet_VEGAN, data = data_analysis_pathways)

  ## get contrast (effects of diet BY COUNTRY)
  contrast_emm <- summary(
    pairs(
      emmeans(
        model,
        specs = ~ Diet_VEGAN | Country_IT
        ),
      interaction = TRUE,
      adjust = "none"
      ),
    infer = c(TRUE, TRUE)
    )

  ## save results
  outcome[i] <- names(data_analysis_pathways)[i + n_covarites]
  
  ## country effect
  est_ITcountry_avg[i] <- summary(model)$coefficients[
    which(
      names(model$coefficients) == "Country_IT"
    ), 1
  ]

  P_ITcountry_avg[i] <- summary(model)$coefficients[
    which(
      names(model$coefficients) == "Country_IT"
    ), 4
  ]
  
  
  ## diet effect
  tr <- confint(model)
  
  CI_L_VGdiet_avg[i] <- tr[which(row.names(tr) == 'Diet_VEGAN'),][1]
  CI_U_VGdiet_avg[i] <- tr[which(row.names(tr) == 'Diet_VEGAN'),][2]
  
  est_VGdiet_avg[i] <- summary(model)$coefficients[
    which(
      names(model$coefficients) == "Diet_VEGAN"
    ), 1
  ]

  P_VGdiet_avg[i] <- summary(model)$coefficients[
    which(
      names(model$coefficients) == "Diet_VEGAN"
    ), 4
  ]
  
  est_VGdiet_inCZ[i] <- -contrast_emm$estimate[1]
  P_VGdiet_inCZ[i] <- contrast_emm$p.value[1]
  CI_L_VGdiet_inCZ[i] <- -contrast_emm$upper.CL[1]
  CI_U_VGdiet_inCZ[i] <- -contrast_emm$lower.CL[1]
  
  
  est_VGdiet_inIT[i] <- -contrast_emm$estimate[2]
  P_VGdiet_inIT[i] <- contrast_emm$p.value[2]
  CI_L_VGdiet_inIT[i] <- -contrast_emm$upper.CL[2]
  CI_U_VGdiet_inIT[i] <- -contrast_emm$lower.CL[2]
  
  
  ## interaction
  diet_country_int[i] <- summary(model)$coefficients[
    which(
      names(model$coefficients) == "Country_IT:Diet_VEGAN"
    ), 1
  ]

  P_diet_country_int[i] <- summary(model)$coefficients[
    which(
      names(model$coefficients) == "Country_IT:Diet_VEGAN"
    ), 4
  ]
}

```


## Results table

```{r}
result_pathways <- data.frame(
  outcome,
  est_ITcountry_avg, P_ITcountry_avg,
  est_VGdiet_avg, P_VGdiet_avg,
  est_VGdiet_inCZ, P_VGdiet_inCZ,
  est_VGdiet_inIT, P_VGdiet_inIT,
  diet_country_int, P_diet_country_int,
  CI_L_VGdiet_avg, CI_U_VGdiet_avg,
  CI_L_VGdiet_inCZ, CI_U_VGdiet_inCZ,
  CI_L_VGdiet_inIT, CI_U_VGdiet_inIT
)
```

### Adjust p values

```{r}
result_pathways <- result_pathways %>% 
  dplyr::mutate(
    fdr_ITcountry_avg = p.adjust(P_ITcountry_avg, method = 'BH'),
    fdr_VGdiet_avg = p.adjust(P_VGdiet_avg, method = 'BH'),
    
    fdr_VGdiet_inCZ = p.adjust(P_VGdiet_inCZ, method = 'BH'),
    fdr_VGdiet_inIT = p.adjust(P_VGdiet_inIT, method = 'BH'),
    fdr_diet_country_int = p.adjust(P_diet_country_int, method = 'BH')
  ) %>% 
  dplyr::select(
    outcome,
    est_ITcountry_avg, P_ITcountry_avg, fdr_ITcountry_avg,
    est_VGdiet_avg, P_VGdiet_avg, fdr_VGdiet_avg,
    est_VGdiet_inCZ, P_VGdiet_inCZ, fdr_VGdiet_inCZ,
    est_VGdiet_inIT, P_VGdiet_inIT, fdr_VGdiet_inIT,
    diet_country_int, P_diet_country_int, fdr_diet_country_int,
    CI_L_VGdiet_avg, CI_U_VGdiet_avg,
    CI_L_VGdiet_inCZ, CI_U_VGdiet_inCZ,
    CI_L_VGdiet_inIT, CI_U_VGdiet_inIT
  )
```

### Result: show and save

```{r}
kableExtra::kable(result_pathways %>%  filter(fdr_VGdiet_avg < 0.05),
                  caption = "Result of linear models, modelling CLR-transformed relative level of given fcuntional pathway with `Diet`, `Country` and `Diet x Country` interaction as fixed-effect predictors. Only the pathways that differ between vegans and omnivores in training cohorts (FDR < 0.05, average diet effect over both countries) are shown. `est` prefix: denotes estimated effects (regression coefficient), i.e. how much clr-transformed relative pathway level differ in vegans compared to omnivores, and in Italian vs Czech cohort, respectively; `P`: p-value, `fdr`: p-value after adjustment for multiple comparison, `CI_L` and `CI_U`: lower and upper bounds of 95% confidence interval respectively. `avg` suffix shows effect averaged across subgroups, whereas `inCZ` and `inIT` shows effect in Czech or Italian cohort respectively. Interaction effects are reported as `diet_country_int` (difference in the effect of vegan diet between Italian and Czech cohorts; positive values indicate a stronger effect in Italian, negative values a stronger effect in Czech cohort) and `P_diet_country_int` (its p-value) All estimates in a single row are based on a single model"
                  ) 

if(file.exists('gitignore/lm_results/result_pathways_filt.csv') == FALSE){
  write.table(result_pathways, 
              'gitignore/lm_results/result_pathways_filt.csv', 
              row.names = FALSE)
  }
```

# Elastic net

To assess the predictive power of pathways features on diet strategy, we employed Elastic Net logistic regression. 

As we expected very high level of co-linearity, we allowed $alpha$ to rather small (0, 0.2 or 0.4).

The performance of the predictive models was evaluated through their capacity of discriminate between vegan and omnivore diets, using out-of-sample area under ROC curve (AUC; estimated with out-of-bag bootstrap) as the measure of discriminatory capacity.

All features were transformed by 2 standard deviations (resulting in standard deviation of 0.5)


## Prepare data for `glmnet`


```{r}

data_pathways_glmnet <- data_pathways_original_clr %>%
  dplyr::mutate(
    vegan = as.numeric(
      dplyr::if_else(
        Diet == "VEGAN", 1, 0
      )
    )
  ) %>%
  dplyr::mutate(
    dplyr::across(all_of(features), ~ arm::rescale(.))
  ) %>%
  dplyr::select(
    ID, vegan, Country, all_of(features)
  )
```

## Fit model

```{r}

modelac <- "elanet_pathways_filt"

assign(
  modelac,
  run(
    expr = clust_glmnet_sep(
      data = data_pathways_glmnet,
      outcome = "vegan",
      clust_id = "ID",
      sample_method = "oos_boot",
      N = 500,
      alphas = c(0, 0.2, 0.4),
      family = "binomial",
      seed = 478
    ),
    path = paste0("gitignore/run/", modelac)
  )
)
```

## See results

### Model summary

```{r}
elanet_pathways_filt$model_summary
elanet_pathways_filt$country_AUC
```

### ROC curve - internal validation

```{r}
#| fig.cap: "Receiver operating characteristic (ROC) curves from a random subset of out-of-bag bootstrap iterations, illustrating the model’s ability to discriminate between vegan and omnivore status based on standardized CLR-transformed pathways reads. Each curve corresponds to an elastic net model trained on a bootstrap resample and evaluated on the subjects not included in that iteration (i.e., out-of-bag samples). The curve plots the true positive rate (sensitivity) against the false positive rate (1 – specificity) across thresholds of predicted vegan probability. The area under the curve (AUC) quantifies overall discriminatory performance, with values closer to 1 indicating stronger separation between groups."

elanet_pathways_filt$plot
```

### Estimated coefficients

```{r}
tr <- data.frame(
  label = row.names(
    elanet_pathways_filt$betas
    )[
      which(
        abs(
          elanet_pathways_filt$betas
          )>0
        )
      ],
  beta = elanet_pathways_filt$betas[
    abs(
      elanet_pathways_filt$betas
      )>0
    ]
  )[-1, ]

tr$pathway <- attr(data_path_originalCZ, 
                   "description")[
                     colnames(data_path_originalCZ) %in% tr$label]

kableExtra::kable(tr %>% select(label, pathway, beta))

```

### Plot of coefficients

```{r, fig.height=12, fig.width=7}
#| fig.cap: "Regression coefficients from the elastic net model predicting vegan diet strategy based on clr-transformed and standardized pathways. Pathways are ordered by the magnitude of the standardized coefficients, indicating their relative importance in distinguishing between the diet groups. The sign of each coefficient indicates the direction of association with vegan diet status, with positive values indicating a higher probability of vegan status and vice versa. Pathways whose effects were shrunk to zero are not shown."

elacoef <- data.frame(
  pathway = row.names(elanet_pathways_filt$betas),
  beta_ela = elanet_pathways_filt$betas[, 1]
) %>%
  arrange(abs(beta_ela)) %>%
  filter(abs(beta_ela) > 0,
         !grepl('Intercept', pathway)) %>%
  mutate(pathway = factor(pathway, levels = pathway)) 


plotac <- "elanet_beta_pathway"
path <- "gitignore/figures"

assign(plotac, 
  ggplot(elacoef,
    aes(
      x = pathway,
      y = beta_ela
    )
  ) +
  geom_point() +
  geom_hline(yintercept = 0, color = "black") +
  labs(
    y = "Standardized beta coefficients",
    x = "pathway"
  ) +
  theme_minimal() +
  coord_flip() + 
  theme(
    axis.text.x = element_text(size = 10),
    axis.text.y = element_text(size = 10),
    axis.title.x = element_text(size = 12),
    axis.title.y = element_text(size = 12),
    legend.position = "bottom"
  )
)

if (file.exists(paste0(path, "/", plotac, ".svg")) == FALSE) {
    ggsave(
    path = paste0(path),
    filename = plotac,
    device = "svg",
    width = 7,
    height = 12
  )
}

get(plotac)
  
```

# External validation

External validation was performed with an independent Czech cohort. 

As a first step, we will use the previously developed and internally validated elastic net model to predict vegan status in the independent Czech cohort. The validation data will be standardized using the mean and standard deviation of each pathway level from the training cohort to ensure comparability across datasets. For each subject in the external validation cohort, we will estimate the predicted probability of being vegan using the elastic net model. This predicted probability will then be used as a variable to discriminate between the diet groups in the independent cohort.

In a 2nd step, we will look at pathways that significantly differed between diet groups (average vegan diet effect across both countries, FDR < 0.05) estimated with linear models (one per pathway) with training cohort. Then we will fit linear models also for external validation cohort. Effect of vegan diet on these pathways will be shown along with 95% confidence interval for all cohorts: training Czech and Italian cohorts, but also in Czech independent (validating) cohort

## Diet discrimination (elastic net)

### Get table of weights, means and SDs

```{r, warning=FALSE}

coefs_pathways <- get_coef(
  original_data = data_analysis_pathways,
  glmnet_model = elanet_pathways_filt)

```


### Identify shared and missing predictors

```{r}
## Which are common with the validations et
common_predictors <- intersect(coefs_pathways$predictor, colnames(data_pathways_validation_clr))
```


### Standardize data in validation set 

```{r}
data_pathways_validation_pred <- data_pathways_validation_clr %>%
  dplyr::mutate(
    vegan = if_else(
      Diet == 'VEGAN', 1, 0
    )
  ) %>%
  dplyr::select(
    vegan,
    dplyr::all_of(common_predictors)
  ) %>% 
  dplyr::mutate(
    across(
      .cols = -vegan,
      .fns = ~ . 
      - coefs_pathways$mean[
        match(
          cur_column(), 
          coefs_pathways$predictor
          )
        ]
      )
    ) %>% 
  dplyr::mutate(
    across(
      .cols = -vegan,
      .fns = ~ . 
      / coefs_pathways$SD[
        match(
          cur_column(), 
          coefs_pathways$predictor
          )
        ]
      )
    )
```

### Get predicted value

```{r}
elanet_pathways_filt$fit
newx <- as.matrix(data_pathways_validation_pred[,-1])

tr <- data_pathways_validation_pred %>% 
  dplyr::mutate(
    predicted_logit = as.numeric(
      predict(
        elanet_pathways_filt$fit, 
        newx = newx
        )
      )
    ) %>% 
  dplyr::mutate(
    predicted = inv_logit(predicted_logit)
  )
```

## Result of external validation

### ROC curve 

```{r}
#| fig.cap: "Receiver operating characteristics (ROC) curve showing the model’s ability to discriminate between vegan and omnivore status in the external validation Czech cohort. The curve plots the true positive rate (sensitivity) against the true positive rate (specificity) at various thresholds of predicted vegan status, as estimated from the elastic net model developed on the training data. The area under the curve (AUC) represents the model's overall performance, with values closer to 1 indicating stronger discrimination."
 
roc_pathway <- pROC::roc(
  vegan ~ predicted_logit,
  data = tr,
  direction = "<",
  levels = c(0, 1),
  ci = TRUE
)

plotac <- "roc_pathway_pl"
path <- "gitignore/figures"

assign(plotac, ggroc(roc_pathway))
get(plotac)

if (file.exists(paste0(path, "/", plotac, ".svg")) == FALSE) {  
  ggsave(
    path = paste0(path),
    filename = plotac,
    device = "svg",
    width = 6,
    height = 4.5
  )
}
```

### Table

```{r}
mod <- elanet_pathways_filt

trainAUC <- mean(mod[["valid_performances"]]$auc_resamp_test)
trainCI <- quantile(mod[["valid_performances"]]$auc_resamp_test,
  probs = c(1 / 40, 39 / 40)
)

res <- data.frame(
  alpha = c(mod$model_summary$alpha, rep("", 4)),
  lambda = c(round(mod$model_summary$lambda, 4), rep("", 4)),
  `performance type` = c(
    "Training set AUC",
    "Out-of-sample AUC (all)",
    "Out-of-sample AUC (Czech)",
    "Out-of-sample AUC (Italy)",
    "External validation AUC"
  ),
  `performance [95% CI]` = c(
    sprintf("%.3f [%.3f to %.3f]", trainAUC, trainCI[1], trainCI[2]),
    sprintf(
      "%.3f [%.3f to %.3f]",
      mod$model_summary$auc_OutOfSample,
      mod$model_summary$auc_oos_CIL,
      mod$model_summary$auc_oos_CIU
    ),
    sprintf(
      "%.3f [%.3f to %.3f]",
      mod$country_AUC$auc_OutOfSample_CZ,
      mod$country_AUC$auc_oos_CIL_CZ,
      mod$country_AUC$auc_oos_CIU_CZ
    ),
    sprintf(
      "%.3f [%.3f to %.3f]",
      mod$country_AUC$auc_OutOfSample_IT,
      mod$country_AUC$auc_oos_CIL_IT,
      mod$country_AUC$auc_oos_CIU_IT
    ),
    sprintf(
      "%.3f [%.3f to %.3f]",
      roc_pathway[["ci"]][2],
      roc_pathway[["ci"]][1],
      roc_pathway[["ci"]][3]
    )
  )
)


kableExtra::kable(
  res %>% mutate(across(where(is.numeric), ~ round(.x, 3))),
  caption = "Performance of the elastic‑net logistic regression model for discriminating vegan from omnivore status using CLR-transformed pathways based on bacteria reads. The model was developed on the combined training data (Czech and Italian cohorts), with the optimmized `alpha` (mixing parameter) and `lambda` (penalty strength) selected via 10-fold cross-validation. Internal validation employed 500 out‑of‑bag bootstrap resamples: the out‑of‑sample AUC is the mean across resamples, and its 95 % confidence interval (CI) is given by the 2.5th and 97.5th percentiles of the bootstrap distribution. The training‑set AUC and its CI were computed analogously from the in‑bag predictions. External validation was carried out on an independent Czech cohort; the reported AUC is the point estimate on that cohort, and its 95% CI was obtained with DeLong’s method."
)
```
## Diet effect across datasets (forest plot)


Similarly as in training data cohorts, we will fit linear model per each of the selected pathway level with a single fixed effect factor of `diet`. 

### Linear model in validation cohort

```{r}
data_analysis_pathways <- data_pathways_validation_clr %>%
  dplyr::mutate(
    Diet_VEGAN = as.numeric(
      dplyr::if_else(
        Diet == 'VEGAN', 1, 0
      )
    )  ) %>%
  dplyr::select(
    Diet_VEGAN,
    dplyr::everything()
  )

summary(data_analysis_pathways[, 1:12])
```

#### Define number of pathways and covariates

```{r}
n_covarites <- 5
n_features <- ncol(data_analysis_pathways) - n_covarites
```

#### Create empty objects

```{r}
outcome <- vector('double', n_features)
est_VGdiet <- vector('double', n_features)
P_VGdiet <- vector('double', n_features)
CI_L_VGdiet <- vector('double', n_features)
CI_U_VGdiet <- vector('double', n_features)
```

#### Linear models per outcome


```{r}
for (i in 1:n_features) {
  ## define variable
  data_analysis_pathways$outcome <- data_analysis_pathways[, (i + n_covarites)]

  ## fit model
  model <- lm(outcome ~ Diet_VEGAN, data = data_analysis_pathways)

  ## save results
  outcome[i] <- names(data_analysis_pathways)[i + n_covarites]

  ## extract diet effect
  tr <- confint(model)

  CI_L_VGdiet[i] <- tr[which(row.names(tr) == "Diet_VEGAN"), ][1]
  CI_U_VGdiet[i] <- tr[which(row.names(tr) == "Diet_VEGAN"), ][2]

  est_VGdiet[i] <- summary(model)$coefficients[
    which(
      names(model$coefficients) == "Diet_VEGAN"
    ), 1
  ]

  P_VGdiet[i] <- summary(model)$coefficients[
    which(
      names(model$coefficients) == "Diet_VEGAN"
    ), 4
  ]
}
```


#### Results table

```{r}
## relevant pathways
diet_sensitive_pathways <- result_pathways %>%
  filter(
    fdr_VGdiet_avg < 0.05
  ) %>%
  select(
    outcome
  )

result_pathways_val <- data.frame(
  outcome,
  est_VGdiet, P_VGdiet,
  CI_L_VGdiet, CI_U_VGdiet
) %>% 
  filter(outcome %in% diet_sensitive_pathways$outcome)

tr <- attr(
  data_path_originalCZ,
  "description")[colnames(data_path_originalCZ) %in% result_pathways_val$outcome]

val_res <- cbind(pathway = tr, result_pathways_val) %>% 
  arrange(desc(est_VGdiet))

kableExtra::kable(val_res,
                  caption = 'Results of linear models estimating the effect of diet on the CLR-transformed proportion of a given functional pathway as the outcome. Only pathways whose proportion significantly differed between diet groups in training cohorts (FDR < 0.05, average effect across both training cohorts) were included. `est` represents the estimated effects (regression coefficient), indicating how much the CLR-transformed proportions differ between vegans and omnivores. `P`: p-value, `fdr`: p-value adjusted for multiple comparisons, and `CI_L` and `CI_U` represent the lower and upper bounds of the 95% confidence interval, respectively. All estimates in a single row are based on a single model') 

if(file.exists('gitignore/lm_results/result_pathways_validation_filt.csv') == FALSE){
  write.table(val_res,
              'gitignore/lm_results/result_pathways_validation_filt.csv', 
              row.names = FALSE)
  }
```

### Forest plot

#### Data preparation

```{r}

len <- nrow(diet_sensitive_pathways)

## subset result tables
result_pathways_subset <- result_pathways %>%
  filter(outcome %in% diet_sensitive_pathways$outcome)

result_pathways_val_subset <- result_pathways_val %>%
  filter(outcome %in% diet_sensitive_pathways$outcome)

## create a data frame
data_forest <- data.frame(
  outcome = rep(diet_sensitive_pathways$outcome, 3),
  beta = c(
    result_pathways_subset$est_VGdiet_inCZ,
    result_pathways_subset$est_VGdiet_inIT,
    result_pathways_val_subset$est_VGdiet
  ),
  lower = c(
    result_pathways_subset$CI_L_VGdiet_inCZ,
    result_pathways_subset$CI_L_VGdiet_inIT,
    result_pathways_val_subset$CI_L_VGdiet
  ),
  upper = c(
    result_pathways_subset$CI_U_VGdiet_inCZ,
    result_pathways_subset$CI_U_VGdiet_inIT,
    result_pathways_val_subset$CI_U_VGdiet
  ),
  dataset = c(
    rep("CZ", len),
    rep("IT", len),
    rep("Validation", len)
  )
)


validation_order <- data_forest %>%
  left_join(
    val_res %>% select(outcome, pathway),
    by = 'outcome'
  ) %>% 
group_by(outcome) %>%
  summarise(beta_mean = mean(beta), .groups = "drop",
            pathway  = first(pathway)) %>%
  arrange(beta_mean) %>%
  pull(pathway)


up_winners <- data_forest %>% 
  pivot_wider(names_from = dataset,
              values_from = c(beta, lower, upper)) %>% 
  left_join(
    elacoef %>% mutate(outcome = pathway) %>% select(-pathway), 
    by = 'outcome') %>% 
  filter(beta_CZ > 0,
         beta_IT > 0,
         lower_Validation > 0,
         beta_ela > 0.1) %>% 
  select(outcome)

down_winners <- data_forest %>% 
  pivot_wider(names_from = dataset,
              values_from = c(beta, lower, upper)) %>% 
  left_join(elacoef %>% mutate(outcome = pathway) %>% select(-pathway),
            by = 'outcome') %>% 
  filter(beta_CZ < 0,
         beta_IT < 0,
         upper_Validation < 0,
         beta_ela < -0.1) %>% 
  select(outcome)

winners <- as.character(c(up_winners$outcome, down_winners$outcome))

 data_forest <- data_forest %>%
  mutate(in_winner = if_else(outcome %in% winners, TRUE, FALSE, missing = FALSE)) %>%
  left_join(
    val_res %>% select(outcome, pathway),
    by = 'outcome'
  ) %>% 
  left_join(
    elacoef %>% mutate(outcome = pathway) %>% select(-pathway), 
    by = 'outcome') %>%  
   mutate(pathway = factor(pathway, levels = validation_order))
```

#### Plotting

```{r, fig.height=12, fig.width=10}
#| fig.cap: "The forest plot illustrates the effects of a vegan diet on the CLR-transformed relative level of selected metabolic pathways, along with their 95% confidence intervals, across two training cohorts (Czech and Italian) and one independent Czech cohort (validation). Green, blue, and grey points/lines represent differences in CLR-transformed pathway proportions between vegans and omnivores within the Italian cohort, Czech cohort, and Czech validation cohort, respectively. Positive values suggest a higher relative pathway level in vegans compared to omnivores. Only pathways that showed significant differences between vegan and omnivorous diets (as an average effect across both training cohorts) were selected, and these effects were further validated in the independent cohort. The estimates for the training cohorts were obtained from a single linear model that included `Diet`, `Country`, and the interaction term `Diet:Country` as predictors. In the independent Czech validation cohort, `Diet` was the only fixed-effect predictor. Patways validated in the linear model and showing predictive power in the elastic net model (|β| > 0.1) are **bold**"

plotac <- "forest_pathway"
path <- "gitignore/figures"

colors <- c("CZ" = "#150999", "IT" = "#329243", "Validation" = "grey60")

assign(
  plotac,
  ggplot(data_forest, 
         aes(x = pathway, 
             y = beta, 
             ymin = lower,
             ymax = upper, 
             color = dataset)) +
    geom_pointrange(position = position_dodge(width = 0.5), size = 0.5) +
    geom_hline(yintercept = 0, color = "black") +
    geom_errorbar(position = position_dodge(width = 0.5), width = 0.2) +
    scale_color_manual(values = colors) +
    labs(
      y = "Effect of vegan diet on clr-trasformed pathway",
      x = "Outcome",
      color = "Dataset"
    ) +
    theme_minimal() +
    coord_flip() +
    scale_x_discrete(
    labels = setNames(
      ifelse(data_forest$in_winner, 
             paste0("**", data_forest$pathway, "**"), 
             as.character(data_forest$pathway)
      ), data_forest$pathway
    )
  ) +
  theme(
    axis.text.x = element_text(size = 10),
    axis.text.y = ggtext::element_markdown(size = 10),  
    axis.title.x = element_text(size = 12),
    axis.title.y = element_text(size = 12),
    legend.position = "bottom"
  )
)

get(plotac)

if (file.exists(paste0(path, "/", plotac, ".svg")) == FALSE) {
  ggsave(
    path = paste0(path),
    filename = plotac,
    device = "svg",
    width = 10,
    height = 12
  )
}
```

### Boxplot

```{r, fig.height=13, fig.width=9, warning=FALSE}
#| fig.cap: "Levels of pathways across all 3 cohorts (Czech and Italian training cohorts and an independent Czech valdiation cohort) and across dietary groups"

plotac <- "boxplot_pathway"
path <- "gitignore/figures"

colo <- c("#F9FFAF", "#329243")

boxplot_cond <- function(variable) {
  p <- ggboxplot(data_merged,
    x = "Diet",
    y = variable,
    fill = "Diet",
    tip.length = 0.15,
    palette = colo,
    outlier.shape = 1,
    lwd = 0.25,
    outlier.size = 0.8,
    facet.by = "Data",
    title = variable,
    ylab = "CLR(pathway proportion)"
  ) +

    theme(
      plot.title = element_text(size = 10),
      axis.title = element_text(size = 8),
      axis.text.y = element_text(size = 7),
      axis.text.x = element_blank(),
      axis.title.x = element_blank()
    )

  return(p)
}

# Plot all outcomes
plots <- map(diet_sensitive_pathways$outcome, boxplot_cond)

# Create a matrix of plots
plots_arranged <- ggarrange(plotlist = plots, ncol = 4, nrow = 6, 
                            common.legend = TRUE)
assign(plotac, plots_arranged)

if (file.exists(paste0(path, "/", plotac, ".svg")) == FALSE) {  
  ggsave(
    path = paste0(path),
    filename = plotac,
    device = "svg",
    width = 9,
    height = 13
  )
}

get(plotac)
```

# Linear model VG duration 

Next, we fit another series of linear models, this time modelling clr-transformed functional pathways (inferred from shotgun metagenomic sequencing) using the following fixed-effect predictors: duration of vegan status (`Diet_duration`, scaled in tens of years), `Country`, their interaction (`Diet_duration × Country`), and `Age`:

$$
\text{CLR(pathway proportion)} = \alpha + \beta_{1} \times \text{Country} + \beta_{2} \times \text{Diet duration} + \beta_{3} \times (\text{Country}:\text{Diet duration}) + \beta_{4} \times \text{Age} + \epsilon
$$

This analysis includes only vegan participants, while omnivores are excluded. The aim was to test whether functional pathways that differ between vegans and omnivores also vary within the vegan group itself, depending on how long participants have been vegan. In other words, we asked whether long-term vegans show stronger up- or down-regulation of diet-sensitive pathways compared to those who adopted the diet more recently.

Because longer vegan duration is likely correlated with age (e.g. a 20-year-old cannot have 20 years of vegan history, unlike a 40- or 60-year-old), we also adjusted for age in the models.

## Get data

### Training

```{r}
meta_trainIT <- read.xlsx('gitignore/data/diet_duration_age.xlsx', sheet = 1)
meta_trainCZ <- read.xlsx('gitignore/data/diet_duration_age.xlsx', sheet = 2) %>% 
  dplyr::mutate(ID = paste0('T', ID),
                Sex = SEX) %>% 
  dplyr::select(-SEX)

meta_trainIT[1:5,]
meta_trainCZ[1:5,]
data_meta_original <- bind_rows(meta_trainIT, meta_trainCZ) %>% 
  rename(`Sample` = `ID`)
  
data_meta_original[1:5,]

data_pathways_original2 <- data_pathways_original_clr %>% 
  rename(`Sample` = `ID`) %>% 
  left_join(data_meta_original, by = 'Sample') %>% 
  select(Sample:Diet, COHORT:Sex, everything())

data_pathways_original2 %>% dim()

data_pathways_original2[
  1:4, 
  (ncol(data_pathways_original2)-10):ncol(data_pathways_original2)
  ]

data_pathways_original2[1:4, 1:10]

```

### Validation

```{r}
data_meta_valid <- read.xlsx('gitignore/data/diet_duration_age.xlsx', sheet = 3) %>% 
  rename(`Sample` = `ID`)

data_pathways_valid2 <- data_pathways_validation_clr %>% 
  rename(`Sample` = `ID`) %>% 
  left_join(data_meta_valid, by = 'Sample') %>% 
  select(Sample:Diet, COHORT:SEX, everything())

data_pathways_valid2 %>% dim()

data_pathways_valid2[
  1:4, 
  (ncol(data_pathways_valid2)-10):ncol(data_pathways_valid2)
  ]

data_pathways_valid2[1:4, 1:10]

data_pathways_valid2 %>% select(Sample, Diet, GRP)

data_pathways_valid2 %>% select(Sample, Diet, GRP, Diet_duration) %>% 
  filter(
    (Diet == 'VEGAN' & GRP == 'OM') | (Diet == 'OMNI' & GRP == 'VN')
  )
```


## Training cohort

### Select data 

```{r}
data_analysis <- data_pathways_original2 %>%
    mutate(Country_IT = as.numeric(
      dplyr::if_else(
        Country == "IT", 0.5, -0.5
      )
    )
  ) %>%
  filter(Diet == 'VEGAN',
         !is.na(Diet_duration)) %>% 
  select(1:8, Country_IT, all_of(diet_sensitive_pathways$outcome))

summary(data_analysis[ , 1:12])
data_analysis[1:10, 1:12]
```


### Define number of pathways and covariates

```{r}
n_covarites <- 9
n_features <- ncol(data_analysis) - n_covarites
```

### Create empty objects

```{r}
outcome <- vector('double', n_features)

est_Diet_duration_inCZ <- vector('double', n_features)
est_Diet_duration_inIT <- vector('double', n_features)
est_Diet_duration_avg <- vector('double', n_features)

est_ITcountry_avg <- vector('double', n_features)

diet_country_int <- vector('double', n_features)

P_Diet_duration_inCZ <- vector('double', n_features)
P_Diet_duration_inIT <- vector('double', n_features)
P_Diet_duration_avg <- vector('double', n_features)

P_ITcountry_avg <- vector('double', n_features)

est_Age <- vector('double', n_features)
P_Age <- vector('double', n_features)


P_diet_country_int <- vector('double', n_features)

CI_L_Diet_duration_inCZ <- vector('double', n_features)
CI_L_Diet_duration_inIT <- vector('double', n_features)
CI_L_Diet_duration_avg <- vector('double', n_features)

CI_U_Diet_duration_inCZ <- vector('double', n_features)
CI_U_Diet_duration_inIT <- vector('double', n_features)
CI_U_Diet_duration_avg <- vector('double', n_features)
```

### Estimate over outcomes

```{r}
if(file.exists('gitignore/lm_results/result_pathways_SGB30_VGdur_training.Rds') == FALSE){
for (i in 1:n_features) {
  
  ## define variable
  data_analysis$outcome <- data_analysis[, (i + n_covarites)]

  ## fit model
  model <- lm(outcome ~ Country_IT * Diet_duration + Age, 
              data = data_analysis %>% 
                mutate(Diet_duration = (Diet_duration/10),
                       Age = (Age-33)/10))

  ## get contrast (effects of diet BY COUNTRY)
  contrast_emm <- summary(
    pairs(
      emmeans(
        model,
        specs = ~ Diet_duration | Country_IT,
        at = list(Diet_duration = c(0, 1)) 
        ),
      interaction = TRUE,
      adjust = "none"
      ),
    infer = c(TRUE, TRUE)
    )

  ## save results
  outcome[i] <- names(data_analysis)[i + n_covarites]
  
  ## country and age effect
  est_ITcountry_avg[i] <- summary(model)$coefficients[
    which(
      names(model$coefficients) == "Country_IT"
    ), 1
  ]
  
  est_Age[i] <- summary(model)$coefficients[
    which(
      names(model$coefficients) == "Age"
    ), 1
  ]

  P_Age[i] <- summary(model)$coefficients[
    which(
      names(model$coefficients) == "Age"
    ), 4
  ]
  
  
  ## diet effect
  tr <- confint(model)
  
  CI_L_Diet_duration_avg[i] <- tr[which(row.names(tr) == 'Diet_duration'),][1]
  CI_U_Diet_duration_avg[i] <- tr[which(row.names(tr) == 'Diet_duration'),][2]
  
  est_Diet_duration_avg[i] <- summary(model)$coefficients[
    which(
      names(model$coefficients) == "Diet_duration"
    ), 1
  ]

  P_Diet_duration_avg[i] <- summary(model)$coefficients[
    which(
      names(model$coefficients) == "Diet_duration"
    ), 4
  ]
  
  est_Diet_duration_inCZ[i] <- -contrast_emm[1,3]
  P_Diet_duration_inCZ[i] <- contrast_emm$p.value[1]
  CI_L_Diet_duration_inCZ[i] <- -contrast_emm$upper.CL[1]
  CI_U_Diet_duration_inCZ[i] <- -contrast_emm$lower.CL[1]
  
  est_Diet_duration_inIT[i] <- -contrast_emm[2,3]
  P_Diet_duration_inIT[i] <- contrast_emm$p.value[2]
  CI_L_Diet_duration_inIT[i] <- -contrast_emm$upper.CL[2]
  CI_U_Diet_duration_inIT[i] <- -contrast_emm$lower.CL[2]
  
  ## interaction
  diet_country_int[i] <- summary(model)$coefficients[
    which(
      names(model$coefficients) == "Country_IT:Diet_duration"
    ), 1
  ]

  P_diet_country_int[i] <- summary(model)$coefficients[
    which(
      names(model$coefficients) == "Country_IT:Diet_duration"
    ), 4
  ]
}

  result_pathways <- data.frame(
  outcome,
  est_ITcountry_avg, P_ITcountry_avg,
  est_Age, P_Age,
  est_Diet_duration_avg, P_Diet_duration_avg,
  est_Diet_duration_inCZ, P_Diet_duration_inCZ,
  est_Diet_duration_inIT, P_Diet_duration_inIT,
  diet_country_int, P_diet_country_int,
  CI_L_Diet_duration_avg, CI_U_Diet_duration_avg,
  CI_L_Diet_duration_inCZ, CI_U_Diet_duration_inCZ,
  CI_L_Diet_duration_inIT, CI_U_Diet_duration_inIT
)
  
  saveRDS(result_pathways, 
              'gitignore/lm_results/result_pathways_SGB30_VGdur_training.Rds')
}

result_pathways <- readRDS('gitignore/lm_results/result_pathways_SGB30_VGdur_training.Rds')
```



### Show and save results

```{r}
kableExtra::kable(result_pathways %>% 
  dplyr::select(
    outcome,
    est_ITcountry_avg, P_ITcountry_avg,
    est_Age, P_Age,
    est_Diet_duration_avg, P_Diet_duration_avg,
    est_Diet_duration_inCZ, P_Diet_duration_inCZ,
    est_Diet_duration_inIT, P_Diet_duration_inIT,
    diet_country_int, P_diet_country_int,
    CI_L_Diet_duration_avg, CI_U_Diet_duration_avg,
    CI_L_Diet_duration_inCZ, CI_U_Diet_duration_inCZ,
    CI_L_Diet_duration_inIT, CI_U_Diet_duration_inIT
    ) %>% 
    arrange(P_Diet_duration_avg),
  caption = "Results of linear models, modelling clr-transformed pathways (functional pathways inferred from shotgun metagenomic sequencing, expressed as relative proportions) with vegan status duration (`Diet_duration`), `Country`, their interaction (`Diet_duration × Country`), and `Age` as predictors, using training data only (Czech and Italian vegan cohorts). Only pathways with clr-transformed levels differing by diet (FDR < 0.05, average effect across both countries) are shown. `est` prefix: denotes estimated effects (regression coefficients), i.e. expected change in clr-transforemd pathway proportion per 10 years of vegan diet or age, or for country (Italy vs Czech Republic). `P`: p-value. `CI_L` and `CI_U`: lower and upper bounds of the 95% confidence interval. `avg` suffix: effect averaged across cohorts, whereas `inCZ` and `inIT` indicate effects in the Czech or Italian cohort, respectively. All estimates in a single row are based on a single model with interaction",
  escape = FALSE
)

if(file.exists('gitignore/lm_results/result_pathways_VGdur_training.csv') == FALSE){
  write.table(result_pathways, 
              'gitignore/lm_results/result_pathways_VGdur_training.csv', row.names = FALSE)
  }
```


## Validation cohort

```{r}
data_analysis_pathways <- data_pathways_valid2 %>%
  filter(Diet == 'VEGAN',
         !is.na(Diet_duration)) %>%
  dplyr::mutate(Diet_duration = as.numeric(as.character(Diet_duration))) %>% 
  dplyr::select(
    Diet_duration, Age,
    all_of(diet_sensitive_pathways$outcome)
  )

summary(data_analysis_pathways[ , 1:12])
```

#### Define number of pathways and covariates

```{r}
n_covarites <- 2
n_features <- ncol(data_analysis_pathways) - n_covarites
```

#### Create empty objects

```{r}
outcome <- vector('double', n_features)
est_VGduration <- vector('double', n_features)
P_VGduration <- vector('double', n_features)
est_Age <- vector('double', n_features)
P_Age <- vector('double', n_features)
CI_L_VGduration <- vector('double', n_features)
CI_U_VGduration <- vector('double', n_features)
```

#### Estimate over outcomes

```{r}
for (i in 1:n_features) {
  ## define variable
  data_analysis_pathways$outcome <- data_analysis_pathways[, (i + n_covarites)]

  ## fit model
  model <- lm(outcome ~ Diet_duration + Age, 
              data = data_analysis_pathways %>% 
                mutate(Diet_duration = (Diet_duration)/10,
                       Age = (Age-33)/10))

  ## save results
  outcome[i] <- names(data_analysis_pathways)[i + n_covarites]

  ## diet effect
  tr <- confint(model)

  CI_L_VGduration[i] <- tr[which(row.names(tr) == "Diet_duration"), ][1]
  CI_U_VGduration[i] <- tr[which(row.names(tr) == "Diet_duration"), ][2]

  est_VGduration[i] <- summary(model)$coefficients[
    which(
      names(model$coefficients) == "Diet_duration"
    ), 1
  ]

  P_VGduration[i] <- summary(model)$coefficients[
    which(
      names(model$coefficients) == "Diet_duration"
    ), 4
  ]
  
  est_Age[i] <- summary(model)$coefficients[
    which(
      names(model$coefficients) == "Age"
    ), 1
  ]

  P_Age[i] <- summary(model)$coefficients[
    which(
      names(model$coefficients) == "Age"
    ), 4
  ]
}
```

#### Results table

```{r}
result_pathways_val <- data.frame(
  outcome,
  est_VGduration, P_VGduration,
  CI_L_VGduration, CI_U_VGduration,
  est_Age, P_Age
)

kableExtra::kable(result_pathways_val %>% 
    arrange(P_VGduration),
caption = "Results of linear models estimating the effect of vegan diet status duration and age on clr-transformed pathway proportions (functional pathways inferred from shotgun metagenomic sequencing). Only pathways with significant differences between vegans and omnivores in training cohorts (FDR < 0.05, average effect over both countries) were included. `est`: regression coefficient, i.e. expected change in clr-transformed pathway proportion per +10 years of vegan diet and +10 years of age respectively. `P`: p-value; `CI_L` and `CI_U`: lower and upper bounds of the 95% confidence interval. All estimates in a single row are based on a single model"
)

if (file.exists("gitignore/result_pathways_VGdur_valid.csv") == FALSE) {
  write.table(result_pathways_val,
    "gitignore/result_pathways_VGdur_valid.csv",
    row.names = FALSE
  )
}
```

## Forest plot

### Prepare data

```{r}

## subset result tables
result_pathways_subset <- result_pathways %>%
  filter(outcome %in% diet_sensitive_pathways$outcome)

result_pathways_val_subset <- result_pathways_val %>%
  filter(outcome %in% diet_sensitive_pathways$outcome)

## create a data frame
data_forest <- data.frame(
  outcome = rep(diet_sensitive_pathways$outcome, 3),
  beta = c(
    result_pathways_subset$est_Diet_duration_inCZ,
    result_pathways_subset$est_Diet_duration_inIT,
    result_pathways_val_subset$est_VGduration
  ),
  lower = c(
    result_pathways_subset$CI_L_Diet_duration_inCZ,
    result_pathways_subset$CI_L_Diet_duration_inIT,
    result_pathways_val_subset$CI_L_VGduration
  ),
  upper = c(
    result_pathways_subset$CI_U_Diet_duration_inCZ,
    result_pathways_subset$CI_U_Diet_duration_inIT,
    result_pathways_val_subset$CI_U_VGduration
  ),
  dataset = c(
    rep("CZ", len),
    rep("IT", len),
    rep("Validation", len)
  )
)


 data_forest <- data_forest %>%
  mutate(in_winner = if_else(outcome %in% winners, TRUE, FALSE, missing = FALSE)) %>%
   left_join(
     val_res %>% select(outcome, pathway), 
     by = 'outcome') %>%
  left_join(
    elacoef %>% mutate(outcome = pathway) %>% select(-pathway), 
    by = 'outcome') %>% 
   mutate(outcome = factor(pathway, levels = validation_order))
```

#### Plotting

```{r, fig.height=13, fig.width=9}
#| fig.cap: "Forest plot shows the effect of vegan status duration (within the vegan sub-population, scale of tens years) on clr-transformed relative level of selected functional pathways (inferred from shotgun metagenomic sequencing), with 95% confidence intervals, across two training cohorts (Czech and Italian) and one independent Czech validation cohort. Green, blue, and grey points/lines represent the expected change in clr-transformed relative pathway level per +10 years of vegan diet within the Italian, Czech, and Czech validation cohorts, respectively. Positive values indicate higher relative pathway level in long-term vegans compared to short-term vegans. Only pathways with significant differences between vegans and omnivores (average effect over the two countries) were included. Estimates for the training cohorts come from a single linear model with `Diet_duration`, `Country`, their interaction (`Diet_duration:Country`), and `Age` as fixed-effect predictors. `Age` was included as it correlates with `Diet_duration` and could act as a confounder. In the Czech validation cohort, `Diet_duration` and `Age` were fixed-effect predictors. Diet-sensitive pathways are shown in **bold**, in the same order as in the forest plot of vegan–omnivore differences"


plotac <- "forest_plot_pathways_VGduration"
path <- "gitignore/figures"

colors <- c("CZ" = "#150999", "IT" = "#329243", "Validation" = "grey60")

assign(plotac, ggplot(
  data_forest, aes(x = outcome, y = beta, ymin = lower, ymax = upper, color = dataset)
) +
  geom_pointrange(position = position_dodge(width = 0.5), size = 0.5) +
  geom_hline(yintercept = 0, color = "black") +
  geom_errorbar(position = position_dodge(width = 0.5), width = 0.2) +
  scale_color_manual(values = colors) +
  labs(
    y = "Effect of vegan diet duration (+10y) on CLR(relative level)",
    x = "Outcome",
    color = "Dataset"
  ) +
  theme_minimal() +
  coord_flip() + 
  scale_x_discrete(
    labels = setNames(
      ifelse(data_forest$in_winner, 
             paste0("**", data_forest$outcome, "**"), 
             as.character(data_forest$outcome)
      ), data_forest$outcome
    )
  ) +
  theme(
    axis.text.x = element_text(size = 10),
    axis.text.y = ggtext::element_markdown(size = 10),  
    axis.title.x = element_text(size = 12),
    axis.title.y = element_text(size = 12),
    legend.position = "bottom"
  )
)

get(plotac)

if (file.exists(paste0(path, "/", plotac, ".svg")) == FALSE) {  
  ggsave(
    path = paste0(path),
    filename = plotac,
    device = "svg",
    width = 9,
    height = 13
  )
}

```

# Summary info about Patways

## Proportions of unmapped and unintegrated

### Czech trainng cohort

```{r}
StratfiedPaths_originalCZ <- read.delim(
  "gitignore/data/pathw/Pathway_abundance_MetaCyc_CZ_humann.tsv",
  header = TRUE, sep = "\t"
) %>%
  filter(!grepl("\\|", X..Pathway))

dim(StratfiedPaths_originalCZ)

all_paths <- colSums(StratfiedPaths_originalCZ[, -1])

unmapped <- StratfiedPaths_originalCZ[1, -1] / all_paths
unintegrated <- StratfiedPaths_originalCZ[2, -1] / all_paths
classified <- 1 - unintegrated - unmapped


kableExtra::kable(
  dplyr::bind_rows(
    quantile(as.numeric(unmapped), probs = c(0, 0.25, 0.5, 0.75, 1)),
    quantile(as.numeric(unintegrated), probs = c(0, 0.25, 0.5, 0.75, 1)),
    quantile(as.numeric(classified), probs = c(0, 0.25, 0.5, 0.75, 1))
  ) %>%
    dplyr::mutate(
      category = c("unmapped", "unintegrated", "classified")
    ) %>%
    dplyr::select(category, everything()),
  caption = "Summary statistics (minimum, 25th, 50th, 75th, and maximum) of the proportions of unmapped, unintegrated, and classified pathway reads across samples from the Czech training cohort. 'Unmapped': reads not aligned to UniRef90. 'Unintegrated': reads aligned to UniRef90 gene families but not assigned to any MetaCyc pathway. 'Classified': reads assigned to known MetaCyc pathways (unstratified community-level abundances)"
)
```

### Italian training cohort

```{r}
StratifiedPaths_originalIT <- read.delim(
  "gitignore/data/pathw/Pathway_abundance_MetaCyc_IT_humann.tsv",
  header = TRUE, sep = "\t"
) %>%
  filter(!grepl("\\|", X..Pathway))

dim(StratifiedPaths_originalIT)

all_paths <- colSums(StratifiedPaths_originalIT[, -1])

unmapped <- StratifiedPaths_originalIT[1, -1] / all_paths
unintegrated <- StratifiedPaths_originalIT[2, -1] / all_paths
classified <- 1 - unintegrated - unmapped


kableExtra::kable(
  dplyr::bind_rows(
    quantile(as.numeric(unmapped), probs = c(0, 0.25, 0.5, 0.75, 1)),
    quantile(as.numeric(unintegrated), probs = c(0, 0.25, 0.5, 0.75, 1)),
    quantile(as.numeric(classified), probs = c(0, 0.25, 0.5, 0.75, 1))
  ) %>%
    dplyr::mutate(
      category = c("unmapped", "unintegrated", "classified")
    ) %>%
    dplyr::select(category, everything()),
  caption = "Summary statistics (minimum, 25th, 50th, 75th, and maximum) of the proportions of unmapped, unintegrated, and classified pathway reads across samples from the Italian training cohort. 'Unmapped': reads not aligned to UniRef90. 'Unintegrated': reads aligned to UniRef90 gene families but not assigned to any MetaCyc pathway. 'Classified': reads assigned to known MetaCyc pathways (unstratified community-level abundances)"
)
```

### Czech validation cohort

```{r}
StratifiedPaths_validation <- read.delim(
  "gitignore/data/pathw/Pathway_abundance_MetaCyc_Validation_humann.tsv",
  header = TRUE, sep = "\t"
) %>%
  filter(!grepl("\\|", X..Pathway))

dim(StratifiedPaths_validation)

all_paths <- colSums(StratifiedPaths_validation[, -1])

unmapped <- StratifiedPaths_validation[1, -1] / all_paths
unintegrated <- StratifiedPaths_validation[2, -1] / all_paths
classified <- 1 - unintegrated - unmapped


kableExtra::kable(
  dplyr::bind_rows(
    quantile(as.numeric(unmapped), probs = c(0, 0.25, 0.5, 0.75, 1)),
    quantile(as.numeric(unintegrated), probs = c(0, 0.25, 0.5, 0.75, 1)),
    quantile(as.numeric(classified), probs = c(0, 0.25, 0.5, 0.75, 1))
  ) %>%
    dplyr::mutate(
      category = c("unmapped", "unintegrated", "classified")
    ) %>%
    dplyr::select(category, everything()),
  caption = "Summary statistics (minimum, 25th, 50th, 75th, and maximum) of the proportions of unmapped, unintegrated, and classified pathway reads across samples from the Czech validation cohort. 'Unmapped': reads not aligned to UniRef90. 'Unintegrated': reads aligned to UniRef90 gene families but not assigned to any MetaCyc pathway. 'Classified': reads assigned to known MetaCyc pathways (unstratified community-level abundances)"
)

data_path_validation <- read.delim(
  "gitignore/data/pathw/Pathway_abundance_MetaCyc_Validation_humann.tsv",
  header = TRUE, sep = "\t"
) %>%
  filter(!grepl("\\|", X..Pathway)) %>%
  select(X..Pathway)
dim(data_path_validation)
```

## Taxon-assigned vs. taxon-unassigned pathways

This refers to the proportion of reads that were functionally assigned to a MetaCyc pathway but whose taxonomic origin could not be determined, from the all classified reads. 

### Czech trainng cohort

```{r}
Paths_originalCZ <- read.delim(
  "gitignore/data/pathw/Pathway_abundance_MetaCyc_CZ_humann.tsv",
  header = TRUE, sep = "\t", check.names = FALSE
) %>%
  filter(
    !grepl("UNMAPPED", `# Pathway`),
    !grepl("UNINTEGRATED", `# Pathway`)
  )

name_col <- names(Paths_originalCZ)[1]

unstrat <- Paths_originalCZ %>% filter(!grepl("\\|", `# Pathway`))
dim(unstrat)
unstrat[1:10, 1:3]

strat <- Paths_originalCZ %>% filter(grepl("\\|", `# Pathway`))
stratCZ <- strat

dim(strat)
strat[1:10, 1:3]

strat_unclassified <- strat %>%
  filter(grepl("\\|unclassified", `# Pathway`))
dim(strat_unclassified)
strat_unclassified[1:10, 1:3]

quants <- quantile(
  colSums(strat_unclassified[, -1]) / colSums(unstrat[, -1]),
  probs = c(0, 0.25, 0.5, 0.75, 1)
)

quants_df <- as.data.frame(t(quants))
names(quants_df) <- c("0%", "25%", "50%", "75%", "100%")
quants_df$category <- "unclassified_within_taxon-assigned"

kableExtra::kable(
  quants_df %>% select(category, everything()),
  caption = "Summary statistics (minimum, 25th, 50th, 75th, maximum) of the proportion of pathway signal that was taxonomically un-assigned, relative to all classified pathways (Czech training cohort). 'Unclassified pathways': MetaCyc pathway abundances that HUMAnN could not attribute to specific taxa (rows labeled '|unclassified' in the stratified output)"
)
```


### Italian trainng cohort

```{r}
Paths_originalIT <- read.delim(
  "gitignore/data/pathw/Pathway_abundance_MetaCyc_IT_humann.tsv",
  header = TRUE, sep = "\t", check.names = FALSE
) %>%
  filter(
    !grepl("UNMAPPED", `# Pathway`),
    !grepl("UNINTEGRATED", `# Pathway`)
  )

name_col <- names(Paths_originalCZ)[1]

unstrat <- Paths_originalIT %>% filter(!grepl("\\|", `# Pathway`))
dim(unstrat)
unstrat[1:10, 1:3]

strat <- Paths_originalIT %>% filter(grepl("\\|", `# Pathway`))
stratIT <- strat

dim(strat)
strat[1:10, 1:3]

strat_unclassified <- strat %>%
  filter(grepl("\\|unclassified", `# Pathway`))
dim(strat_unclassified)
strat_unclassified[1:10, 1:3]

quants <- quantile(
  colSums(strat_unclassified[, -1]) / colSums(unstrat[, -1]),
  probs = c(0, 0.25, 0.5, 0.75, 1)
)

quants_df <- as.data.frame(t(quants))
names(quants_df) <- c("0%", "25%", "50%", "75%", "100%")
quants_df$category <- "unclassified_within_taxon-assigned"

kableExtra::kable(
  quants_df %>% select(category, everything()),
  caption = "Summary statistics (minimum, 25th, 50th, 75th, maximum) of the proportion of pathway signal that was taxonomically un-assigned, relative to all classified pathways (Italian training cohort). 'Unclassified pathways': MetaCyc pathway abundances that HUMAnN could not attribute to specific taxa (rows labeled '|unclassified' in the stratified output)"
)
```

### Validation cohort

```{r}
Paths_validation <- read.delim(
  "gitignore/data/pathw/Pathway_abundance_MetaCyc_Validation_humann.tsv",
  header = TRUE, sep = "\t", check.names = FALSE
) %>%
  filter(
    !grepl("UNMAPPED", `# Pathway`),
    !grepl("UNINTEGRATED", `# Pathway`)
  )

unstrat <- Paths_validation %>% filter(!grepl("\\|", `# Pathway`))
dim(unstrat)
unstrat[1:10, 1:3]

strat <- Paths_validation %>% filter(grepl("\\|", `# Pathway`))

stratVAL <- strat

dim(strat)
strat[1:10, 1:3]

strat_unclassified <- strat %>%
  filter(grepl("\\|unclassified", `# Pathway`))
dim(strat_unclassified)
strat_unclassified[1:10, 1:3]

quants <- quantile(
  colSums(strat_unclassified[, -1]) / colSums(unstrat[, -1]),
  probs = c(0, 0.25, 0.5, 0.75, 1)
)

quants_df <- as.data.frame(t(quants))
names(quants_df) <- c("0%", "25%", "50%", "75%", "100%")
quants_df$category <- "unclassified_within_taxon-assigned"

kableExtra::kable(
  quants_df %>% select(category, everything()),
  caption = "Summary statistics (minimum, 25th, 50th, 75th, maximum) of the proportion of pathway signal that was taxonomically un-assigned, relative to all classified pathways (Czech validation cohort). 'Unclassified pathways': MetaCyc pathway abundances that HUMAnN could not attribute to specific taxa (rows labeled '|unclassified' in the stratified output)"
)
```


## Taxa contribution to diet-sensitive pathways

### PWY-5367: petroselinate biosynthesis

#### Czech training cohort

```{r}

res <- stratCZ %>%
  filter(grepl("PWY-5367", `# Pathway`)) %>%
  mutate(`# Pathway` = sub(".*\\|", "", `# Pathway`)) %>%
  {
    mat <- select(., -`# Pathway`)
    mat_prop <- sweep(mat, 2, colSums(mat), "/")
    quants <- t(apply(mat_prop, 1, function(row) {
      quantile(row, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
    }))
    cbind(`# Pathway` = .$`# Pathway`, quants)
  } %>%
  as.data.frame()

colnames(res)[-1] <- c("0%", "25%", "50%", "75%", "100%")

res[, -1] <- lapply(res[, -1], as.numeric)

kableExtra::kable(
  res %>%
    arrange(desc(`50%`), desc(`75%`), desc(`100%`)) %>%
    filter(`100%` > 0) %>%
    head(10) %>%
    mutate(across(-`# Pathway`, ~ round(., 4))),
  caption = "Top 10 taxa contributing to pathway `PWY-5367: petroselinate biosynthesis` in the Czech training cohort. Values represent the distribution (0th, 25th, 50th, 75th, 100th percentiles) of each taxon’s proportional contribution to the total pathway abundance across samples. The row 'unclassified' indicates the fraction of the pathway abundance that HUMAnN could not assign to specific taxa"
)
```


#### Italian training cohort

```{r}

res <- stratIT %>%
  filter(grepl("PWY-5367", `# Pathway`)) %>%
  mutate(`# Pathway` = sub(".*\\|", "", `# Pathway`)) %>%
  {
    mat <- select(., -`# Pathway`)
    mat_prop <- sweep(mat, 2, colSums(mat), "/")
    quants <- t(apply(mat_prop, 1, function(row) {
      quantile(row, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
    }))
    cbind(`# Pathway` = .$`# Pathway`, quants)
  } %>%
  as.data.frame()

colnames(res)[-1] <- c("0%", "25%", "50%", "75%", "100%")

res[, -1] <- lapply(res[, -1], as.numeric)

kableExtra::kable(
  res %>%
    arrange(desc(`50%`), desc(`75%`), desc(`100%`)) %>%
    filter(`100%` > 0) %>%
    head(10) %>%
    mutate(across(-`# Pathway`, ~ round(., 4))),
  caption = "Top 10 taxa contributing to pathway `PWY-5367: petroselinate biosynthesis` in the Italian training cohort. Values represent the distribution (0th, 25th, 50th, 75th, 100th percentiles) of each taxon’s proportional contribution to the total pathway abundance across samples. The row 'unclassified' indicates the fraction of the pathway abundance that HUMAnN could not assign to specific taxa"
)
```


#### Czech validation cohort

```{r}

res <- stratVAL %>%
  filter(grepl("PWY-5367", `# Pathway`)) %>%
  mutate(`# Pathway` = sub(".*\\|", "", `# Pathway`)) %>%
  {
    mat <- select(., -`# Pathway`)
    mat_prop <- sweep(mat, 2, colSums(mat), "/")
    quants <- t(apply(mat_prop, 1, function(row) {
      quantile(row, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
    }))
    cbind(`# Pathway` = .$`# Pathway`, quants)
  } %>%
  as.data.frame()

colnames(res)[-1] <- c("0%", "25%", "50%", "75%", "100%")

res[, -1] <- lapply(res[, -1], as.numeric)

kableExtra::kable(
  res %>%
    arrange(desc(`50%`), desc(`75%`), desc(`100%`)) %>%
    filter(`100%` > 0) %>%
    head(10) %>%
    mutate(across(-`# Pathway`, ~ round(., 4))),
  caption = "Top 10 taxa contributing to pathway `PWY-5367: petroselinate biosynthesis` in the Czech validation cohort. Values represent the distribution (0th, 25th, 50th, 75th, 100th percentiles) of each taxon’s proportional contribution to the total pathway abundance across samples. The row 'unclassified' indicates the fraction of the pathway abundance that HUMAnN could not assign to specific taxa"
)
```


### NONOXIPENT-PWY: pentose phosphate pathway (non-oxidative branch) I

#### Czech training cohort

```{r}

res <- stratCZ %>%
  filter(grepl("NONOXIPENT-PWY", `# Pathway`)) %>%
  mutate(`# Pathway` = sub(".*\\|", "", `# Pathway`)) %>%
  {
    mat <- select(., -`# Pathway`)
    mat_prop <- sweep(mat, 2, colSums(mat), "/")
    quants <- t(apply(mat_prop, 1, function(row) {
      quantile(row, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
    }))
    cbind(`# Pathway` = .$`# Pathway`, quants)
  } %>%
  as.data.frame()

colnames(res)[-1] <- c("0%", "25%", "50%", "75%", "100%")

res[, -1] <- lapply(res[, -1], as.numeric)

kableExtra::kable(
  res %>%
    arrange(desc(`50%`), desc(`75%`), desc(`100%`)) %>%
    head(10) %>%
    mutate(across(-`# Pathway`, ~ round(., 4))),
  caption = "Top 10 taxa contributing to pathway `NONOXIPENT-PWY: pentose phosphate pathway (non-oxidative branch) I` in the Czech training cohort. Values represent the distribution (0th, 25th, 50th, 75th, 100th percentiles) of each taxon’s proportional contribution to the total pathway abundance across samples. The row 'unclassified' indicates the fraction of the pathway abundance that HUMAnN could not assign to specific taxa"
)
```


#### Italian training cohort

```{r}

res <- stratIT %>%
  filter(grepl("NONOXIPENT-PWY", `# Pathway`)) %>%
  mutate(`# Pathway` = sub(".*\\|", "", `# Pathway`)) %>%
  {
    mat <- select(., -`# Pathway`)
    mat_prop <- sweep(mat, 2, colSums(mat), "/")
    quants <- t(apply(mat_prop, 1, function(row) {
      quantile(row, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
    }))
    cbind(`# Pathway` = .$`# Pathway`, quants)
  } %>%
  as.data.frame()

colnames(res)[-1] <- c("0%", "25%", "50%", "75%", "100%")

res[, -1] <- lapply(res[, -1], as.numeric)

kableExtra::kable(
  res %>%
    arrange(desc(`50%`), desc(`75%`), desc(`100%`)) %>%
    filter(`100%` > 0) %>%
    head(10) %>%
    mutate(across(-`# Pathway`, ~ round(., 4))),
  caption = "Top 10 taxa contributing to pathway `NONOXIPENT-PWY: pentose phosphate pathway (non-oxidative branch) I` in the Italian training cohort. Values represent the distribution (0th, 25th, 50th, 75th, 100th percentiles) of each taxon’s proportional contribution to the total pathway abundance across samples. The row 'unclassified' indicates the fraction of the pathway abundance that HUMAnN could not assign to specific taxa"
)
```


#### Czech validation cohort

```{r}

res <- stratVAL %>%
  filter(grepl("NONOXIPENT-PWY", `# Pathway`)) %>%
  mutate(`# Pathway` = sub(".*\\|", "", `# Pathway`)) %>%
  {
    mat <- select(., -`# Pathway`)
    mat_prop <- sweep(mat, 2, colSums(mat), "/")
    quants <- t(apply(mat_prop, 1, function(row) {
      quantile(row, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
    }))
    cbind(`# Pathway` = .$`# Pathway`, quants)
  } %>%
  as.data.frame()

colnames(res)[-1] <- c("0%", "25%", "50%", "75%", "100%")

res[, -1] <- lapply(res[, -1], as.numeric)

kableExtra::kable(
  res %>%
    arrange(desc(`50%`), desc(`75%`), desc(`100%`)) %>%
    filter(`100%` > 0) %>%
    head(10) %>%
    mutate(across(-`# Pathway`, ~ round(., 4))),
  caption = "Top 10 taxa contributing to pathway `NONOXIPENT-PWY: pentose phosphate pathway (non-oxidative branch) I` in the Czech validation cohort. Values represent the distribution (0th, 25th, 50th, 75th, 100th percentiles) of each taxon’s proportional contribution to the total pathway abundance across samples. The row 'unclassified' indicates the fraction of the pathway abundance that HUMAnN could not assign to specific taxa"
)
```


### TRPSYN-PWY: L-tryptophan biosynthesis

#### Czech training cohort

```{r}

res <- stratCZ %>%
  filter(grepl("TRPSYN-PWY", `# Pathway`)) %>%
  mutate(`# Pathway` = sub(".*\\|", "", `# Pathway`)) %>%
  {
    mat <- select(., -`# Pathway`)
    mat_prop <- sweep(mat, 2, colSums(mat), "/")
    quants <- t(apply(mat_prop, 1, function(row) {
      quantile(row, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
    }))
    cbind(`# Pathway` = .$`# Pathway`, quants)
  } %>%
  as.data.frame()

colnames(res)[-1] <- c("0%", "25%", "50%", "75%", "100%")

res[, -1] <- lapply(res[, -1], as.numeric)

kableExtra::kable(
  res %>%
    arrange(desc(`50%`), desc(`75%`), desc(`100%`)) %>%
    filter(`100%` > 0) %>%
    head(10) %>%
    mutate(across(-`# Pathway`, ~ round(., 4))),
  caption = "Top 10 taxa contributing to pathway `TRPSYN-PWY: L-tryptophan biosynthesis` in the Czech training cohort. Values represent the distribution (0th, 25th, 50th, 75th, 100th percentiles) of each taxon’s proportional contribution to the total pathway abundance across samples. The row 'unclassified' indicates the fraction of the pathway abundance that HUMAnN could not assign to specific taxa"
)
```


#### Italian training cohort

```{r}

res <- stratIT %>%
  filter(grepl("TRPSYN-PWY", `# Pathway`)) %>%
  mutate(`# Pathway` = sub(".*\\|", "", `# Pathway`)) %>%
  {
    mat <- select(., -`# Pathway`)
    mat_prop <- sweep(mat, 2, colSums(mat), "/")
    quants <- t(apply(mat_prop, 1, function(row) {
      quantile(row, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
    }))
    cbind(`# Pathway` = .$`# Pathway`, quants)
  } %>%
  as.data.frame()

colnames(res)[-1] <- c("0%", "25%", "50%", "75%", "100%")

res[, -1] <- lapply(res[, -1], as.numeric)

kableExtra::kable(
  res %>%
    arrange(desc(`50%`), desc(`75%`), desc(`100%`)) %>%
    filter(`100%` > 0) %>%
    head(10) %>%
    mutate(across(-`# Pathway`, ~ round(., 4))),
  caption = "Top 10 taxa contributing to pathway `TRPSYN-PWY: L-tryptophan biosynthesis` in the Italian training cohort. Values represent the distribution (0th, 25th, 50th, 75th, 100th percentiles) of each taxon’s proportional contribution to the total pathway abundance across samples. The row 'unclassified' indicates the fraction of the pathway abundance that HUMAnN could not assign to specific taxa"
)
```


#### Czech validation cohort

```{r}

res <- stratVAL %>%
  filter(grepl("TRPSYN-PWY", `# Pathway`)) %>%
  mutate(`# Pathway` = sub(".*\\|", "", `# Pathway`)) %>%
  {
    mat <- select(., -`# Pathway`)
    mat_prop <- sweep(mat, 2, colSums(mat), "/")
    quants <- t(apply(mat_prop, 1, function(row) {
      quantile(row, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
    }))
    cbind(`# Pathway` = .$`# Pathway`, quants)
  } %>%
  as.data.frame()

colnames(res)[-1] <- c("0%", "25%", "50%", "75%", "100%")

res[, -1] <- lapply(res[, -1], as.numeric)

kableExtra::kable(
  res %>%
    arrange(desc(`50%`), desc(`75%`), desc(`100%`)) %>%
    filter(`100%` > 0) %>%
    head(10) %>%
    mutate(across(-`# Pathway`, ~ round(., 4))),
  caption = "Top 10 taxa contributing to pathway `TRPSYN-PWY: L-tryptophan biosynthesis` in the Czech validation cohort. Values represent the distribution (0th, 25th, 50th, 75th, 100th percentiles) of each taxon’s proportional contribution to the total pathway abundance across samples. The row 'unclassified' indicates the fraction of the pathway abundance that HUMAnN could not assign to specific taxa"
)
```

### PWY-8178: pentose phosphate pathway (non-oxidative branch) II

#### Czech training cohort

```{r}

res <- stratCZ %>%
  filter(grepl("PWY-8178", `# Pathway`)) %>%
  mutate(`# Pathway` = sub(".*\\|", "", `# Pathway`)) %>%
  {
    mat <- select(., -`# Pathway`)
    mat_prop <- sweep(mat, 2, colSums(mat), "/")
    quants <- t(apply(mat_prop, 1, function(row) {
      quantile(row, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
    }))
    cbind(`# Pathway` = .$`# Pathway`, quants)
  } %>%
  as.data.frame()

colnames(res)[-1] <- c("0%", "25%", "50%", "75%", "100%")

res[, -1] <- lapply(res[, -1], as.numeric)

kableExtra::kable(
  res %>%
    arrange(desc(`50%`), desc(`75%`), desc(`100%`)) %>%
    filter(`100%` > 0) %>%
    head(10) %>%
    mutate(across(-`# Pathway`, ~ round(., 4))),
  caption = "Top 10 taxa contributing to pathway `PWY-8178: pentose phosphate pathway (non-oxidative branch) II` in the Czech training cohort. Values represent the distribution (0th, 25th, 50th, 75th, 100th percentiles) of each taxon’s proportional contribution to the total pathway abundance across samples. The row 'unclassified' indicates the fraction of the pathway abundance that HUMAnN could not assign to specific taxa"
)
```


#### Italian training cohort

```{r}

res <- stratIT %>%
  filter(grepl("PWY-8178", `# Pathway`)) %>%
  mutate(`# Pathway` = sub(".*\\|", "", `# Pathway`)) %>%
  {
    mat <- select(., -`# Pathway`)
    mat_prop <- sweep(mat, 2, colSums(mat), "/")
    quants <- t(apply(mat_prop, 1, function(row) {
      quantile(row, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
    }))
    cbind(`# Pathway` = .$`# Pathway`, quants)
  } %>%
  as.data.frame()

colnames(res)[-1] <- c("0%", "25%", "50%", "75%", "100%")

res[, -1] <- lapply(res[, -1], as.numeric)

kableExtra::kable(
  res %>%
    arrange(desc(`50%`), desc(`75%`), desc(`100%`)) %>%
    filter(`100%` > 0) %>%
    head(10) %>%
    mutate(across(-`# Pathway`, ~ round(., 4))),
  caption = "Top 10 taxa contributing to pathway `PWY-8178: pentose phosphate pathway (non-oxidative branch) II` in the Italian training cohort. Values represent the distribution (0th, 25th, 50th, 75th, 100th percentiles) of each taxon’s proportional contribution to the total pathway abundance across samples. The row 'unclassified' indicates the fraction of the pathway abundance that HUMAnN could not assign to specific taxa"
)
```


#### Czech validation cohort

```{r}

res <- stratVAL %>%
  filter(grepl("PWY-8178", `# Pathway`)) %>%
  mutate(`# Pathway` = sub(".*\\|", "", `# Pathway`)) %>%
  {
    mat <- select(., -`# Pathway`)
    mat_prop <- sweep(mat, 2, colSums(mat), "/")
    quants <- t(apply(mat_prop, 1, function(row) {
      quantile(row, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
    }))
    cbind(`# Pathway` = .$`# Pathway`, quants)
  } %>%
  as.data.frame()

colnames(res)[-1] <- c("0%", "25%", "50%", "75%", "100%")

res[, -1] <- lapply(res[, -1], as.numeric)

kableExtra::kable(
  res %>%
    arrange(desc(`50%`), desc(`75%`), desc(`100%`)) %>%
    filter(`100%` > 0) %>%
    head(10) %>%
    mutate(across(-`# Pathway`, ~ round(., 4))),
  caption = "Top 10 taxa contributing to pathway `PWY-8178: pentose phosphate pathway (non-oxidative branch) II` in the Czech validation cohort. Values represent the distribution (0th, 25th, 50th, 75th, 100th percentiles) of each taxon’s proportional contribution to the total pathway abundance across samples. The row 'unclassified' indicates the fraction of the pathway abundance that HUMAnN could not assign to specific taxa"
)
```

### PWY-801: homocysteine and cysteine interconversion

#### Czech training cohort

```{r}

res <- stratCZ %>%
  filter(grepl("PWY-801", `# Pathway`)) %>%
  mutate(`# Pathway` = sub(".*\\|", "", `# Pathway`)) %>%
  {
    mat <- select(., -`# Pathway`)
    mat_prop <- sweep(mat, 2, colSums(mat), "/")
    quants <- t(apply(mat_prop, 1, function(row) {
      quantile(row, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
    }))
    cbind(`# Pathway` = .$`# Pathway`, quants)
  } %>%
  as.data.frame()

colnames(res)[-1] <- c("0%", "25%", "50%", "75%", "100%")

res[, -1] <- lapply(res[, -1], as.numeric)

kableExtra::kable(
  res %>%
    arrange(desc(`50%`), desc(`75%`), desc(`100%`)) %>%
    filter(`100%` > 0) %>%
    head(10) %>%
    mutate(across(-`# Pathway`, ~ round(., 4))),
  caption = "Top 10 taxa contributing to pathway `PWY-801: homocysteine and cysteine interconversion` in the Czech training cohort. Values represent the distribution (0th, 25th, 50th, 75th, 100th percentiles) of each taxon’s proportional contribution to the total pathway abundance across samples. The row 'unclassified' indicates the fraction of the pathway abundance that HUMAnN could not assign to specific taxa"
)
```


#### Italian training cohort

```{r}

res <- stratIT %>%
  filter(grepl("PWY-801", `# Pathway`)) %>%
  mutate(`# Pathway` = sub(".*\\|", "", `# Pathway`)) %>%
  {
    mat <- select(., -`# Pathway`)
    mat_prop <- sweep(mat, 2, colSums(mat), "/")
    quants <- t(apply(mat_prop, 1, function(row) {
      quantile(row, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
    }))
    cbind(`# Pathway` = .$`# Pathway`, quants)
  } %>%
  as.data.frame()

colnames(res)[-1] <- c("0%", "25%", "50%", "75%", "100%")

res[, -1] <- lapply(res[, -1], as.numeric)

kableExtra::kable(
  res %>%
    arrange(desc(`50%`), desc(`75%`), desc(`100%`)) %>%
    filter(`100%` > 0) %>%
    head(10) %>%
    mutate(across(-`# Pathway`, ~ round(., 4))),
  caption = "Top 10 taxa contributing to pathway `PWY-801: homocysteine and cysteine interconversion` in the Italian training cohort. Values represent the distribution (0th, 25th, 50th, 75th, 100th percentiles) of each taxon’s proportional contribution to the total pathway abundance across samples. The row 'unclassified' indicates the fraction of the pathway abundance that HUMAnN could not assign to specific taxa"
)
```


#### Czech validation cohort

```{r}

res <- stratVAL %>%
  filter(grepl("PWY-801", `# Pathway`)) %>%
  mutate(`# Pathway` = sub(".*\\|", "", `# Pathway`)) %>%
  {
    mat <- select(., -`# Pathway`)
    mat_prop <- sweep(mat, 2, colSums(mat), "/")
    quants <- t(apply(mat_prop, 1, function(row) {
      quantile(row, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
    }))
    cbind(`# Pathway` = .$`# Pathway`, quants)
  } %>%
  as.data.frame()

colnames(res)[-1] <- c("0%", "25%", "50%", "75%", "100%")

res[, -1] <- lapply(res[, -1], as.numeric)

kableExtra::kable(
  res %>%
    arrange(desc(`50%`), desc(`75%`), desc(`100%`)) %>%
    filter(`100%` > 0) %>%
    head(10) %>%
    mutate(across(-`# Pathway`, ~ round(., 4))),
  caption = "Top 10 taxa contributing to pathway `PWY-801: homocysteine and cysteine interconversion` in the Czech validation cohort. Values represent the distribution (0th, 25th, 50th, 75th, 100th percentiles) of each taxon’s proportional contribution to the total pathway abundance across samples. The row 'unclassified' indicates the fraction of the pathway abundance that HUMAnN could not assign to specific taxa"
)
```

### PWY-6293: superpathway of L-cysteine biosynthesis (fungi)

#### Czech training cohort

```{r}

res <- stratCZ %>%
  filter(grepl("PWY-6293", `# Pathway`)) %>%
  mutate(`# Pathway` = sub(".*\\|", "", `# Pathway`)) %>%
  {
    mat <- select(., -`# Pathway`)
    mat_prop <- sweep(mat, 2, colSums(mat), "/")
    quants <- t(apply(mat_prop, 1, function(row) {
      quantile(row, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
    }))
    cbind(`# Pathway` = .$`# Pathway`, quants)
  } %>%
  as.data.frame()

colnames(res)[-1] <- c("0%", "25%", "50%", "75%", "100%")

res[, -1] <- lapply(res[, -1], as.numeric)

kableExtra::kable(
  res %>%
    arrange(desc(`50%`), desc(`75%`), desc(`100%`)) %>%
    filter(`100%` > 0) %>%
    head(10) %>%
    mutate(across(-`# Pathway`, ~ round(., 4))),
  caption = "Top 10 taxa contributing to pathway `PWY-6293: superpathway of L-cysteine biosynthesis (fungi)` in the Czech training cohort. Values represent the distribution (0th, 25th, 50th, 75th, 100th percentiles) of each taxon’s proportional contribution to the total pathway abundance across samples. The row 'unclassified' indicates the fraction of the pathway abundance that HUMAnN could not assign to specific taxa"
)
```


#### Italian training cohort

```{r}

res <- stratIT %>%
  filter(grepl("PWY-6293", `# Pathway`)) %>%
  mutate(`# Pathway` = sub(".*\\|", "", `# Pathway`)) %>%
  {
    mat <- select(., -`# Pathway`)
    mat_prop <- sweep(mat, 2, colSums(mat), "/")
    quants <- t(apply(mat_prop, 1, function(row) {
      quantile(row, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
    }))
    cbind(`# Pathway` = .$`# Pathway`, quants)
  } %>%
  as.data.frame()

colnames(res)[-1] <- c("0%", "25%", "50%", "75%", "100%")

res[, -1] <- lapply(res[, -1], as.numeric)

kableExtra::kable(
  res %>%
    arrange(desc(`50%`), desc(`75%`), desc(`100%`)) %>%
    filter(`100%` > 0) %>%
    head(10) %>%
    mutate(across(-`# Pathway`, ~ round(., 4))),
  caption = "Top 10 taxa contributing to pathway `PWY-6293: superpathway of L-cysteine biosynthesis (fungi)` in the Italian training cohort. Values represent the distribution (0th, 25th, 50th, 75th, 100th percentiles) of each taxon’s proportional contribution to the total pathway abundance across samples. The row 'unclassified' indicates the fraction of the pathway abundance that HUMAnN could not assign to specific taxa"
)
```


#### Czech validation cohort

```{r}

res <- stratVAL %>%
  filter(grepl("PWY-6293", `# Pathway`)) %>%
  mutate(`# Pathway` = sub(".*\\|", "", `# Pathway`)) %>%
  {
    mat <- select(., -`# Pathway`)
    mat_prop <- sweep(mat, 2, colSums(mat), "/")
    quants <- t(apply(mat_prop, 1, function(row) {
      quantile(row, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
    }))
    cbind(`# Pathway` = .$`# Pathway`, quants)
  } %>%
  as.data.frame()

colnames(res)[-1] <- c("0%", "25%", "50%", "75%", "100%")

res[, -1] <- lapply(res[, -1], as.numeric)

kableExtra::kable(
  res %>%
    arrange(desc(`50%`), desc(`75%`), desc(`100%`)) %>%
    filter(`100%` > 0) %>%
    head(10) %>%
    mutate(across(-`# Pathway`, ~ round(., 4))),
  caption = "Top 10 taxa contributing to pathway `PWY-6293: superpathway of L-cysteine biosynthesis (fungi)` in the Czech validation cohort. Values represent the distribution (0th, 25th, 50th, 75th, 100th percentiles) of each taxon’s proportional contribution to the total pathway abundance across samples. The row 'unclassified' indicates the fraction of the pathway abundance that HUMAnN could not assign to specific taxa"
)
```

### PWY-6284: superpathway of unsaturated fatty acids biosynthesis (E. coli)

#### Czech training cohort

```{r}

res <- stratCZ %>%
  filter(grepl("PWY-6284", `# Pathway`)) %>%
  mutate(`# Pathway` = sub(".*\\|", "", `# Pathway`)) %>%
  {
    mat <- select(., -`# Pathway`)
    mat_prop <- sweep(mat, 2, colSums(mat), "/")
    quants <- t(apply(mat_prop, 1, function(row) {
      quantile(row, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
    }))
    cbind(`# Pathway` = .$`# Pathway`, quants)
  } %>%
  as.data.frame()

colnames(res)[-1] <- c("0%", "25%", "50%", "75%", "100%")

res[, -1] <- lapply(res[, -1], as.numeric)

kableExtra::kable(
  res %>%
    arrange(desc(`50%`), desc(`75%`), desc(`100%`)) %>%
    filter(`100%` > 0) %>%
    head(10) %>%
    mutate(across(-`# Pathway`, ~ round(., 4))),
  caption = "Top 10 taxa contributing to pathway `PWY-6284: superpathway of unsaturated fatty acids biosynthesis (E. coli)` in the Czech training cohort. Values represent the distribution (0th, 25th, 50th, 75th, 100th percentiles) of each taxon’s proportional contribution to the total pathway abundance across samples. The row 'unclassified' indicates the fraction of the pathway abundance that HUMAnN could not assign to specific taxa"
)
```


#### Italian training cohort

```{r}

res <- stratIT %>%
  filter(grepl("PWY-6284", `# Pathway`)) %>%
  mutate(`# Pathway` = sub(".*\\|", "", `# Pathway`)) %>%
  {
    mat <- select(., -`# Pathway`)
    mat_prop <- sweep(mat, 2, colSums(mat), "/")
    quants <- t(apply(mat_prop, 1, function(row) {
      quantile(row, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
    }))
    cbind(`# Pathway` = .$`# Pathway`, quants)
  } %>%
  as.data.frame()

colnames(res)[-1] <- c("0%", "25%", "50%", "75%", "100%")

res[, -1] <- lapply(res[, -1], as.numeric)

kableExtra::kable(
  res %>%
    arrange(desc(`50%`), desc(`75%`), desc(`100%`)) %>%
    filter(`100%` > 0) %>%
    head(10) %>%
    mutate(across(-`# Pathway`, ~ round(., 4))),
  caption = "Top 10 taxa contributing to pathway `PWY-6284: superpathway of unsaturated fatty acids biosynthesis (E. coli)` in the Italian training cohort. Values represent the distribution (0th, 25th, 50th, 75th, 100th percentiles) of each taxon’s proportional contribution to the total pathway abundance across samples. The row 'unclassified' indicates the fraction of the pathway abundance that HUMAnN could not assign to specific taxa"
)
```


#### Czech validation cohort

```{r}

res <- stratVAL %>%
  filter(grepl("PWY-6284", `# Pathway`)) %>%
  mutate(`# Pathway` = sub(".*\\|", "", `# Pathway`)) %>%
  {
    mat <- select(., -`# Pathway`)
    mat_prop <- sweep(mat, 2, colSums(mat), "/")
    quants <- t(apply(mat_prop, 1, function(row) {
      quantile(row, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
    }))
    cbind(`# Pathway` = .$`# Pathway`, quants)
  } %>%
  as.data.frame()

colnames(res)[-1] <- c("0%", "25%", "50%", "75%", "100%")

res[, -1] <- lapply(res[, -1], as.numeric)

kableExtra::kable(
  res %>%
    arrange(desc(`50%`), desc(`75%`), desc(`100%`)) %>%
    filter(`100%` > 0) %>%
    head(10) %>%
    mutate(across(-`# Pathway`, ~ round(., 4))),
  caption = "Top 10 taxa contributing to pathway `PWY-6284: superpathway of unsaturated fatty acids biosynthesis (E. coli)` in the Czech validation cohort. Values represent the distribution (0th, 25th, 50th, 75th, 100th percentiles) of each taxon’s proportional contribution to the total pathway abundance across samples. The row 'unclassified' indicates the fraction of the pathway abundance that HUMAnN could not assign to specific taxa"
)
```

### PWY-5367: petroselinate biosynthesis

#### Czech training cohort

```{r}

res <- stratCZ %>%
  filter(grepl("PWY-5367", `# Pathway`)) %>%
  mutate(`# Pathway` = sub(".*\\|", "", `# Pathway`)) %>%
  {
    mat <- select(., -`# Pathway`)
    mat_prop <- sweep(mat, 2, colSums(mat), "/")
    quants <- t(apply(mat_prop, 1, function(row) {
      quantile(row, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
    }))
    cbind(`# Pathway` = .$`# Pathway`, quants)
  } %>%
  as.data.frame()

colnames(res)[-1] <- c("0%", "25%", "50%", "75%", "100%")

res[, -1] <- lapply(res[, -1], as.numeric)

kableExtra::kable(
  res %>%
    arrange(desc(`50%`), desc(`75%`), desc(`100%`)) %>%
    filter(`100%` > 0) %>%
    head(10) %>%
    mutate(across(-`# Pathway`, ~ round(., 4))),
  caption = "Top 10 taxa contributing to pathway `PWY-5367: petroselinate biosynthesis` in the Czech training cohort. Values represent the distribution (0th, 25th, 50th, 75th, 100th percentiles) of each taxon’s proportional contribution to the total pathway abundance across samples. The row 'unclassified' indicates the fraction of the pathway abundance that HUMAnN could not assign to specific taxa"
)
```


#### Italian training cohort

```{r}

res <- stratIT %>%
  filter(grepl("PWY-5367", `# Pathway`)) %>%
  mutate(`# Pathway` = sub(".*\\|", "", `# Pathway`)) %>%
  {
    mat <- select(., -`# Pathway`)
    mat_prop <- sweep(mat, 2, colSums(mat), "/")
    quants <- t(apply(mat_prop, 1, function(row) {
      quantile(row, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
    }))
    cbind(`# Pathway` = .$`# Pathway`, quants)
  } %>%
  as.data.frame()

colnames(res)[-1] <- c("0%", "25%", "50%", "75%", "100%")

res[, -1] <- lapply(res[, -1], as.numeric)

kableExtra::kable(
  res %>%
    arrange(desc(`50%`), desc(`75%`), desc(`100%`)) %>%
    filter(`100%` > 0) %>%
    head(10) %>%
    mutate(across(-`# Pathway`, ~ round(., 4))),
  caption = "Top 10 taxa contributing to pathway `PWY-5367: petroselinate biosynthesis` in the Italian training cohort. Values represent the distribution (0th, 25th, 50th, 75th, 100th percentiles) of each taxon’s proportional contribution to the total pathway abundance across samples. The row 'unclassified' indicates the fraction of the pathway abundance that HUMAnN could not assign to specific taxa"
)
```


#### Czech validation cohort

```{r}

res <- stratVAL %>%
  filter(grepl("PWY-5367", `# Pathway`)) %>%
  mutate(`# Pathway` = sub(".*\\|", "", `# Pathway`)) %>%
  {
    mat <- select(., -`# Pathway`)
    mat_prop <- sweep(mat, 2, colSums(mat), "/")
    quants <- t(apply(mat_prop, 1, function(row) {
      quantile(row, probs = c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
    }))
    cbind(`# Pathway` = .$`# Pathway`, quants)
  } %>%
  as.data.frame()

colnames(res)[-1] <- c("0%", "25%", "50%", "75%", "100%")

res[, -1] <- lapply(res[, -1], as.numeric)

kableExtra::kable(
  res %>%
    arrange(desc(`50%`), desc(`75%`), desc(`100%`)) %>%
    filter(`100%` > 0) %>%
    head(10) %>%
    mutate(across(-`# Pathway`, ~ round(., 4))),
  caption = "Top 10 taxa contributing to pathway `PWY-5367: petroselinate biosynthesis` in the Czech validation cohort. Values represent the distribution (0th, 25th, 50th, 75th, 100th percentiles) of each taxon’s proportional contribution to the total pathway abundance across samples. The row 'unclassified' indicates the fraction of the pathway abundance that HUMAnN could not assign to specific taxa"
)
```

# Reproducibility

```{r}
sessionInfo()
```
